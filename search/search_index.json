{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Spice up your spec , Better <code>taste</code> your app !</p> <p>Chutney helps you test deployed applications and validate functional requirements. Chutney provides you a set of capabilities for executing your scenario without having to write and maintain glue code.  </p> <p> Install, configure, write and run your first scenario here !  You can find out a comprehensive list of what Chutney can do in the documentation.</p>"},{"location":"#why-another-test-tool","title":"Why another test tool ?","text":"<p>Chutney is an opinionated test tool based upon the practice of Specification by Example.</p> <p>Chutney was inspired by Seb Rose blog post in which he revised the test pyramid according to test readability The Testing Iceberg</p> <p>Chutney is not exactly what Seb Rose meant by using this metaphor.</p> <p>But we envisioned a tool allowing multiple levels of readability, providing a single place for business people, testers and developers to co-create, share and execute acceptance tests.</p> <p>Moreover, we needed to :</p> <ul> <li>Promote and support Specification by Example across multiple teams and offices</li> <li>Ease collaboration and shared understanding in a \"not so agile\" environment</li> <li>Provide a single source of truth without hiding details in tests glue code</li> <li>Ease the automation of thousands of manual tests without writing and maintaining specific code</li> <li>Automate end-to-end tests of distributed software across secured networks, including hardware over telco networks</li> </ul>"},{"location":"#what-it-is-not","title":"What it is not","text":"<p>Chutney is not a replacement for tools like Cucumber, etc.</p> <p>While having some overlap, they all fill different test aspect.</p> <p>The key difference is the absence of glue and support code.</p> <p>While we think that having glue code is cumbersome and adds unnecessary levels of indirection between the features and the system under test, especially for high level tests and distributed software.</p> <p>We also do think that using Cucumber for low level testing is sometimes very handy and useful, thanks to the high level of expression provided by Gherkin (and this is part of the Testing Iceberg Seb Rose talked about).</p> <p>Chutney is no silver-bullet, it is just a tool which promotes and supports one way of doing software testing.</p> <p>As such, to benefit from it, we highly advise you to be proficient or to document yourself about Behaviour-Driven-Development (by Dan North), Specification by Example (by Gojko Adzic) and Living Documentation (by Cyrille Martraire). All of which, however you call it, define the same practices and share the same goals.</p> <p>Global understanding of Test Driven Development and knowledge about Ubiquitous Language (from Domain Driven Design, by Eric Evans) is also valuable.</p>"},{"location":"#why-choose-chutney","title":"Why Choose Chutney ?","text":"<p>Chutney stands out for its simple and flexible approach to test automation, focusing on complex scenarios and end-to-end testing. Compared to other similar tools like Cucumber or Karate, here are some key points :</p> <ul> <li> <p>Simplified DSL    Chutney offers a Kotlin-based Domain-Specific Language (DSL) that allows writing readable and easy-to-maintain scenarios for developers. This is an attractive alternative for teams preferring a more structured language than the one used by Cucumber with regexp.</p> </li> <li> <p>Focused on blackbox Testing    Unlike Cucumber, which is often used for functional testing at build, Chutney is specifically designed for testing on deployed application. It excels at handling API calls, database interactions, and verifying asynchronous call chains.</p> </li> <li> <p>User-Friendly Interface for Non-Developers    Chutney includes an interface specifically designed for non-developers, enabling them to execute tests, plan test campaigns, and analyze reports with ease. This sets it apart from other tools like Cucumber or Karate, which often require technical expertise for these tasks. This accessibility bridges the gap between technical and non-technical teams, fostering collaboration and improving efficiency.</p> </li> <li> <p>Multi-level Gherkin-like language    Quoting the Glacio project</p> <p>There is a common problem encountered using BDD tools like Cucumber. This is: - Non-technical actors write specs  - Developers write glue code containing hidden business specificities  That is an historic clivage which tends to leave grey areas undiscovered until implementation time.  Furthermore, non-technical actors can point out relevant aspects of implementation just as developers can do the same about the business part (aka specs).  As Seb Rose stated in this article (https://claysnow.co.uk/the-testing-iceberg/), levels of readability can differ from the ones encountered in usual test segregation (unit, integration, acceptance, etc.).</p> <p>Chutney\u2019s support for nested steps allows teams to write scenarios that reflect different levels of abstraction.High-level steps can describe functional requirements in a business-readable manner, while the underlying steps handle the technical details. This structured approach emphasizes functional clarity at the top layer, while efficiently managing technical complexity beneath, setting Chutney apart from tools like Cucumber or Karate, which often struggle to balance this granularity.</p> </li> </ul> <p>Finally, Chutney is production ready and used in companies by two main types of users</p> <ul> <li>Project Teams   These users leverage Chutney in a project-based mode to validate their developments. Typically, they use it at the end of the CI/CD pipeline to ensure their work meets integration and functional requirements after deployment.</li> <li>Cross-Application Testing Teams   Dedicated testing teams use Chutney across multiple interconnected applications. These teams focus on validating complex integrations and ensuring that end-to-end scenarios work seamlessly in large systems with various dependencies.</li> </ul>"},{"location":"#front-end","title":"Front end","text":"<p>Chutney comes with a web application front end to launch and show executions of scenarios and campaigns.</p> <p>scenario execution report example </p> <p>campaign execution report example </p>"},{"location":"common/coming_soon/","title":"Coming soon","text":"<p>Coming Soon</p>"},{"location":"documentation/dataset/","title":"Dataset","text":"<p>Dataset values will be available in the execution context.</p> <p>A dataset contains :  Constants (<code>Map&lt;String,String&gt;</code>) which are a map of key/value.  Datatable(<code>List&lt;Map&lt;String,String&gt;&gt;</code>) which is a list of maps of key/value. Datatable is a matrix with list elements as rows and map keys as columns.  </p>"},{"location":"documentation/dataset/#declaration","title":"Declaration","text":"KotlinUI <p>In (<code>Dataset</code> menu)</p>"},{"location":"documentation/dataset/#constant-dataset","title":"Constant dataset","text":"<pre><code>val constants = mapOf(\n        \"key1\" to \"X\",\n        \"key2\" to \"Y\"\n    )\n</code></pre>"},{"location":"documentation/dataset/#array-dataset","title":"Array dataset","text":"<pre><code>val datatable = listOf(\n    mapOf(\n        \"key1\" to \"X\",\n        \"key2\" to \"Y\"\n    ),\n    mapOf(\n        \"key1\" to \"A\",\n        \"key2\" to \"B\"\n    )\n)\n</code></pre>"},{"location":"documentation/dataset/#constant-dataset_1","title":"Constant dataset","text":"<p>In <code>Dataset</code> menu: </p>"},{"location":"documentation/dataset/#array-dataset_1","title":"Array dataset","text":""},{"location":"documentation/dataset/#usage","title":"Usage","text":"KotlinUI"},{"location":"documentation/dataset/#constant-dataset_2","title":"Constant dataset","text":"<p>The code below show how to use constants in your scenario with <code>ForStrategy</code> to iterate once over these constants.</p> <pre><code>val scenario = Scenario(title = \"scenario with for over constants\") {\n    When(\"&lt;i&gt; step description - \\${#key1} - \\${#key2}\", strategy = ForStrategy()) {\n        SuccessAction(\n        )\n    }\n}\nval executionService = ExecutionService()\nexecutionService.execute(scenario, constants = constants)\n</code></pre>"},{"location":"documentation/dataset/#array-dataset_2","title":"Array dataset","text":"<p>To use an array dataset you need to iterate over it with the <code>ForStrategy</code> as below:</p> <p><pre><code>val scenario = Scenario(title = \"scenario with for\") {\n    When(\"&lt;i&gt; step description - \\${#key1} - \\${#key2}\", strategy = ForStrategy()) {\n        SuccessAction(\n        )\n    }\n}\nval executionService = ExecutionService()\nexecutionService.execute(scenario, dataset = dataset)\n</code></pre> In this example the step <code>When</code> of the scenario will be executed <code>2</code> times (because <code>dataset.size == 2</code>). The variable <code>&lt; i &gt;</code> will be replaced by the iteration (the row index here) and <code>\\${#key1}</code> <code>\\${#key2}</code> will be replaced by the content of the row.</p>"},{"location":"documentation/dataset/#link-dataset-to-a-scenario","title":"Link dataset to a scenario","text":"<p>In scenario edition page: </p>"},{"location":"documentation/dataset/#link-dataset-to-a-campaign","title":"Link dataset to a campaign","text":"<p>In campaign edition page: </p>"},{"location":"documentation/intellij_plugin/","title":"Idea Plugin","text":"<p>This plugin provides support for working with Chutney scenarios files in IntelliJ IDEA based IDEs.</p>"},{"location":"documentation/intellij_plugin/#installation","title":"Installation","text":"<ul> <li>Download chutney-idea-plugin-X.Y.zip asset from available releases.</li> <li>In your Intellij Ide, go to File -&gt; Settings -&gt; Plugins.</li> <li>Click install plugin from disc and select the downloaded zip.   </li> <li>Restart your IDE.</li> </ul>"},{"location":"documentation/intellij_plugin/#configuration","title":"Configuration","text":"<p>Configuration files can be found in the intellij_config_folder<code>/chutney-idea-plugin/conf</code> folder.</p>"},{"location":"documentation/intellij_plugin/#define-an-environment","title":"Define an environment","text":"<p>An environment named <code>GLOBAL</code> must be created in <code>intellij_config_folder/conf/GLOBAL.json</code>. It contains all targets used in scenarios.  You can get access to this file directly from your IDE </p> <p>You can find here an example of how to declare an environment using JSON.</p>"},{"location":"documentation/intellij_plugin/#features","title":"Features","text":"<p>Important</p> <p>To be recognized by the plugin, a scenario's json file must be suffixed with <code>.chutney.json</code>. This file can be generated automatically by the synchronize feature.</p>"},{"location":"documentation/intellij_plugin/#completion","title":"Completion","text":"<p>The plugin use custom Chutney JSON Schemas to enable code completion and validation in JSON Scenarios files.</p> <p>Examples:</p> target CompletionMissing required attribute <p></p> <p></p>"},{"location":"documentation/intellij_plugin/#execution","title":"Execution","text":""},{"location":"documentation/intellij_plugin/#kotlin","title":"Kotlin","text":"<p>Function annotated with <code>@KChutney</code> can be executed and synchronized </p>"},{"location":"documentation/intellij_plugin/#json","title":"Json","text":"<p>You can run your scenario from the json file by clicking on:</p> <ul> <li>run icon. Scenario will be executed on the embedded Chutney Instance.  The embedded server will run on a toolWindow where you can see the logs   </li> <li> <p>run menu item in the contextual menu when right-click:</p> <ul> <li>on scenario json file. </li> <li>on a folder. </li> </ul> </li> </ul> <p>You can also define a run configuration and choose if execution will be done on the embedded or the remote Chutney instance.</p>"},{"location":"documentation/intellij_plugin/#report","title":"Report","text":"<p>In Services view, you can run, stop and view execution report </p>"},{"location":"documentation/intellij_plugin/#synchronize-with-remote-chutney","title":"Synchronize with remote Chutney","text":"<p>Note</p> <p>In order to get access to a remote Chutney instance, some properties are required.  Go to File -&gt; Settings -&gt; tools -&gt; Chutney and fill-in your Chutney remote instance properties </p> <p>Synchronization actions are available in right-click contextual menu. </p> <ul> <li>Update remote scenario from local   Push current file content to remote Chutney in order to override scenario content.</li> <li> <p>Update local scenario from remote server   Pull remote scenario content to local file.  </p> </li> <li> <p>Add scenario from remote server     Create scenario on the remote Chutney.</p> </li> <li> <p>Show diff between local scenario file and remote   Compare local and remote scenario content.   </p> </li> <li> <p>Editor Notifications   When you open a Chutney Scenario File and if the scenario is different from the remote version, a notification with action is shown as below  </p> </li> <li> <p>Open remote scenario file in browser   Open remote scenario's last execution in the default browser</p> </li> <li> <p>Add scenario to an existing campaign   </p> </li> <li> <p>Get All scenarios of a campaign   On an empty directory call the action Get scenarios from Campaign.   </p> </li> </ul>"},{"location":"documentation/intellij_plugin/#convert-from-hjson-to-json","title":"Convert from HJSON to JSON","text":"<p>This can be useful when copying scenario HJSON content from Chutney UI. If you copy/paste HJSON content, the IDE will automatically transform it to json. If you want to paste without transformation click the cancel Button.</p>"},{"location":"documentation/scenario_sync/","title":"Synchronize","text":""},{"location":"documentation/scenario_sync/#synchronize-your-kotlin-scenario-with-a-server","title":"Synchronize your kotlin scenario with a server","text":""},{"location":"documentation/scenario_sync/#create-your-kotlin-scenario-locally","title":"Create your Kotlin scenario locally","text":"<p>Follow this documentation to write your first Kotlin scenario.</p>"},{"location":"documentation/scenario_sync/#create-your-scenario-on-chutney-server","title":"Create your scenario on chutney server","text":"<p>To create your scenario on a Chutney server from your IDE,</p> <ol> <li>Annotate with @Scenario     In order to be included in the synchronization, a scenario must be annotated with @Scenario.</li> <li> <p>Configure your server info     <pre><code>import com.chutneytesting.kotlin.synchronize.synchronise\nimport com.chutneytesting.kotlin.util.ChutneyServerInfo\n\nval chutneyLocalServer = ChutneyServerInfo(\n    url = \"http://localhost:8081\", user = \"admin\", password = \"admin\",\n    proxyUrl = \"http://my.proxy.host:3128\", proxyUser = \"user\", proxyPassword = \"pwd\" // (1)!\n)\n</code></pre></p> <ol> <li>Proxy connection configuration is not mandatory.    It can be also set with corresponding Java System properties. <code>[ http | https ].[ proxyHost | proxyPort | proxyUser | proxyPassword ]</code></li> </ol> </li> <li> <p>Execute a main to call synchronise function on your scenario     <pre><code>fun main() {\n    synchronizeScenarios(packageName = \"your.package.name\", updateRemote = true, serverInfo = chutneyLocalServer) // (1)!\n}\n</code></pre></p> <ol> <li>See logs generated by synchronize function in your console to get more details of what it did.</li> </ol> <p>This will create a new scenario on the given chutney server. Then it will create a json file that contains the json representation of the scenario.</p> <p>json file name</p> <p>The json file name format is : <code>{ID}</code> <code>-</code> <code>{scenario title}</code> <code>.chutney.json</code> In our example it will be something like: <code>123456-Search documents.chutney.json</code></p> <p>synchronise function parameters</p> name type Required default description <code>serverInfo</code> <code>ChutneyServerInfo</code> <code>null</code> holds needed information to connect to chutney server. <code>updateRemote</code> <code>Boolean</code> <code>false</code> if true, the given scenario will be created if it doesn't exist and updated if it does. <code>path</code> <code>String</code> <code>src/main/chutney/generated</code> path where to generate scenarios json files. <code>block</code> <code>SynchronizeScenariosBuilder.() -&gt; Unit</code> <code>all scenario annotated with @Scenario</code> Define which scenarios will be synchronized. </li> <li> <p>Refer the generated ID in your scenario constructor:</p> <p>where to find the generated ID ?</p> <p>As explained above, the generated ID is in the created json file's name (123456-Search documents.chutney.json).</p> <pre><code>val first_scenario = Scenario(id = 123456, title = \"Search documents\") {\n    When(\"I visit a search engine\") {\n        HttpGetAction(\n                target = \"search_engine\",\n                uri = \"/\"\n        )\n    }\n    Then(\"I am on the front page\") {\n        SuccessAction()\n    }\n}\n</code></pre> <p>Now your scenario is created on the server ! </p> </li> </ol>"},{"location":"documentation/scenario_sync/#update-your-scenario-on-chutney-server","title":"Update your scenario on chutney server","text":"<p>After editing your scenario kotlin code, jut call synchronize function again.</p> <p>Don't forget !</p> <p>Don't forget to call synchronize with <code>updateRemote = true</code></p> <p>Now your scenario is updated on Chutney server ! </p> <p>Synchronize from your integration server</p> <ul> <li>Push Kotlin scenarios source code to a centralized repository hosted on your SCM server (github, gitlab, bitbucket...).</li> <li>Call synchronize main from an integration server(jenkins, gitlab CI, github actions...) to update scenarios on your remote Chutney instance.</li> <li>Synchronize call can be scheduled just before running your test campaigns to have up-to-date scenarios.</li> </ul>"},{"location":"documentation/scenario_sync/#configure-your-environment-on-the-server","title":"Configure your environment on the server","text":"<p>Now, the last step before running your scenario from the server is to setup environments and targets.</p> <p>Create an environment</p> <p>To manage environments on a server, you can :</p> <ul> <li>Use the UI forms to create or import environments.</li> <li>Copy an existing environment file into the server configuration folder (default is <code>.chutney/conf/environment</code>)</li> </ul>"},{"location":"documentation/write/","title":"Write a scenario","text":"<p>In order to write a scenario, you also need to declare environments and services you want to test.</p>"},{"location":"documentation/write/#define-your-test-environment","title":"Define your test environment","text":""},{"location":"documentation/write/#declare-a-target","title":"Declare a target","text":"<p>Under <code>src/main/kotlin</code> create a package (ex. <code>com.chutneytesting.getstart</code>) and create a Kotlin file (ex. <code>Environments.kt</code>) with the following content :</p> Environments.kt<pre><code>package com.chutneytesting.getstart\n\nimport com.chutneytesting.kotlin.dsl.ChutneyTarget\n\nval google = ChutneyTarget(\n        name = \"search_engine\",\n        url = \"https://www.google.fr\"\n)\n</code></pre> <ul> <li>The target name <code>search_engine</code> is used as a reference in your scenarios</li> <li>The <code>google</code> variable is a reference to set a target in an <code>environment</code></li> </ul>"},{"location":"documentation/write/#declare-an-environment","title":"Declare an environment","text":"<p>Now you can declare an <code>environment</code> within the same file, add the following content :</p> Environments.kt<pre><code>val environment = ChutneyEnvironment(\n        name = \"The World Wide Web\",\n        description = \"The World Wide Web\",\n        targets = listOf(\n                google\n        )\n)\n</code></pre> <ul> <li>We reference the target <code>google</code> using the variable name.</li> <li>The environment <code>name</code> and <code>description</code> can be anything meaningful to you. The name will be shown in the execution report.</li> <li>The variable name <code>environment</code> is a reference to set the environment on running tests</li> </ul>"},{"location":"documentation/write/#define-your-test-environment-alternative","title":"Define your test environment (alternative)","text":"<p>There is another way to declare environments and targets by using JSON files.</p> <p>Create a folder <code>.chutney/environments</code> in your project root folder. Then, create a file <code>environment.json</code> with the following content :</p> <pre><code>{\n    \"name\" : \"World Wide Web\",\n    \"description\" : \"The World Wide Web\",\n    \"targets\": [\n        {\n            \"name\" : \"search_engine\",\n            \"url\" : \"https://www.google.fr\"\n        }\n    ]\n}\n</code></pre> <p>An environment is already defined on your Chutney server?</p> <p>If you have already defined an environment on your Chutney server, you can import it by calling <code>synchroniseLocal</code> function of <code>EnvironmentSynchronizeService</code>:</p> <p><pre><code>    import EnvironmentSynchronizeService\n    import com.chutneytesting.kotlin.util.ChutneyServerInfo\n\n    fun main() {\n        val chutneyLocalServer = ChutneyServerInfo(\n            remoteServerUrl = \"https://localhost:8081\",\n            remoteUserName = \"admin\",\n            remoteUserPassword = \"admin\"\n        )\n\n        val environmentSynchronizeService = EnvironmentSynchronizeService()\n\n        environmentSynchronizeService.synchroniseLocal(serverInfo = chutneyLocalServer)\n   }\n</code></pre> <code>synchroniseLocal</code> function parameters:</p> name type Required default description <code>serverInfo</code> <code>ChutneyServerInfo</code> * holds needed information to connect to chutney server <code>environmentsPath</code> <code>String</code> <code>.chutney/environments</code> where to save the imported environments <code>force</code> <code>Boolean</code> <code>false</code> if true, locally existing environments files will be overridden.Else they will be kept unchanged"},{"location":"documentation/write/#write-a-scenario","title":"Write a scenario","text":"<p>Under <code>src/main/kotlin</code>, in the same package or another, create a Kotlin file (ex. <code>Scenarios.kt</code>) with the following content :</p> Scenarios.kt<pre><code>package com.chutneytesting.getstart\n\nimport com.chutneytesting.kotlin.dsl.HttpGetAction\nimport com.chutneytesting.kotlin.dsl.Scenario\nimport com.chutneytesting.kotlin.dsl.SuccessAction\nimport com.chutneytesting.kotlin.dsl.spEL\n\nval search_scenario = Scenario(title = \"Search documents\") {\n    When(\"I visit a search engine\") {\n        HttpGetAction(\n                target = \"search_engine\",\n                uri = \"/\",\n                validations = mapOf(\"request accepted\" to \"status == 200\".spEL())\n        )\n    }\n    Then(\"I am on the front page\") {\n        SuccessAction()\n    }\n}\n</code></pre> <ul> <li>The scenario title <code>Search documents</code> will be shown in the execution report.</li> <li>There are 2 steps <code>When I visit a search engine</code> and <code>Then I am on the front page</code></li> <li>The first step will execute an HTTP GET call on the target name <code>search_engine</code> on the uri <code>/</code><ul> <li>It also has one validation <code>request accepted</code> to check the response code status is 200.</li> </ul> </li> <li>The second step does nothing meaningful in this example</li> </ul> <p>Et voil\u00e0 !</p> <p>You have successfully setup and written your first scenario using Chutney. Now, you will see how to run it ! </p>"},{"location":"documentation/actions/amqp/","title":"AMQP","text":"Browse implementations <ul> <li>Basic publish</li> <li>Basic consume</li> <li>Basic get</li> <li>Clean queues</li> <li>Create and bind temporary queue</li> <li>Unbind queue</li> <li>Delete queue</li> </ul> <p>Target Configuration</p> <p>For all actions, a AMQP target should be defined and have a <code>name</code> and a valid <code>url</code>.</p> Rabbitmq target<pre><code>{\n    \"name\":\"RABBITMQ_TARGET\",\n    \"url\":\"amqp://localhost:5672\",\n    \"properties\": [\n        {\n            \"key\":\"password\",\n            \"value\":\"admin\"\n        },\n        {\n            \"key\":\"username\",\n            \"value\":\"admin\"\n        }\n    ]\n}\n</code></pre>"},{"location":"documentation/actions/amqp/#basic-publish","title":"Basic publish","text":"<p>Browse implementation</p> <p>Use this action to publish a message to an exchange.</p> InputsOutputs Required Name Type Description * <code>exchange-name</code> String The exchange to publish the message to. Must exist <code>routing-key</code> String The routing key. See this example for more details. <code>headers</code> Map&lt;String, Object&gt; Message headers <code>properties</code> Map&lt;String, String&gt; Other message's properties. Actually only content_type property is handled. * <code>payload</code> String Message content Name Type Description <code>payload</code> String Message content <code>headers</code> String Message headers"},{"location":"documentation/actions/amqp/#example","title":"Example","text":"Kotlin <pre><code>    AmqpBasicPublishAction(\n        target = \"RABBITMQ_TARGET\",\n        exchangeName = \"my.exchange\",\n        routingKey = \"children.fiction\",\n        headers = mapOf(\n            \"season\" to \"1\",\n        ),\n        properties = mapOf(\n            \"content_type\" to \"application/json\",\n        ),\n        payload = \"\"\"\n                {\n                \"title\": \"Castle in the Sky\",\n                \"director\": \"Hayao Miyazaki\",\n                \"rating\": 78,\n                \"category\": \"fiction\"\n                }\n            \"\"\".trimIndent(),\n    )\n</code></pre>"},{"location":"documentation/actions/amqp/#basic-consume","title":"Basic consume","text":"<p>Browse implementation</p> <p>Use this action to consume messages from a queue.</p> <p>Parallel consume</p> <ul> <li>Only one queue consumer can be started at a given time.</li> <li>To start a queue consumer, Chutney:<ul> <li>check if an other consumer was started:<ul> <li>if true, it re check the queue availability every <code>500 ms</code> without exceeding <code>timeout</code> duration. At every iteration, the remaining timeout is reduced by <code>500 ms</code>. </li> <li>else, it mark the queue as locked and start the current consumer.</li> </ul> </li> <li>consume messages without exceeding the remaining timeout ( = timeout - n * 500ms) or the <code>nb-messages</code>.</li> <li>stop consumer and unlock the queue.</li> </ul> </li> </ul> <p> Don't use long <code>timeout</code>. In parallel execution, it makes execution slower and it can fails other executions. Prefer a retry strategy with short timeOut to allow different execution to access to the queue. For example : instead of 5 min timeout at action level, prefer adding a RetryTimeOutStrategy(\"5 min\" (timeout), \"1 s\" (delay))) to the step</p> InputsOutputs Required Name Type Default Description * <code>queue-name</code> string Queue name. <code>nb-messages</code> integer 1 How many messages to be consumed. Throw error if got messages number is less than nb-messages. <code>selector</code> string <code>timeout</code> duration <code>\"10 sec\"</code> In how many time a consume connection must be established and messages must be read <code>ack</code> boolean true Basic.ack acknowledgements mode is used if true. Name Type Description <code>body</code> String response as Map <code>payloads</code> String response paylods <code>headers</code> String response headers"},{"location":"documentation/actions/amqp/#example_1","title":"Example","text":"Consume with short timeoutConsume with long timeout <pre><code>AmqpBasicConsumeAction(\n    target = \"RABBITMQ_TARGET\",\n    queueName = \"my.queue\",\n    nbMessages = 1,\n    selector = \"\\$..[?(\\$.headers.season=='1')]\",\n    timeout = \"5 sec\",\n    ack = true\n)\n</code></pre> <pre><code>Step(\"Long basic consume\", RetryTimeOutStrategy(\"5 min\", \"1 s\")) {\n    AmqpBasicConsumeAction(\n        target = \"RABBITMQ_TARGET\",\n        queueName = \"my.queue\",\n        nbMessages = 1,\n        selector = \"\\$..[?(\\$.headers.season=='1')]\"\n    )\n}\n</code></pre>"},{"location":"documentation/actions/amqp/#basic-get","title":"Basic get","text":"<p>Browse implementation</p> <p>Use this action to have direct access to available messages in a queue.</p> InputsOutputs Required Name Type Description * <code>queue-name</code> String Queue name. Name Type Description <code>message</code> String response as Map <code>body</code> String response body <code>headers</code> String response headers"},{"location":"documentation/actions/amqp/#example_2","title":"Example","text":"Kotlin <pre><code>AmqpBasicGetAction(\n    target =\"RABBITMQ_TARGET\",\n    queueName = \"my.queue\"\n)\n</code></pre>"},{"location":"documentation/actions/amqp/#clean-queues","title":"Clean queues","text":"<p>Browse implementation</p> <p>Use this action to purges the content of the given queues. For example, it can be used at the beginning of your scenario to ensure that used queues are empty.</p> <p>Warning</p> <p>Be careful when cleaning a queue which is shared between many scenarios.</p> InputsOutput Required Name Type Description * <code>queue-names</code> List&lt;String&gt; to be burged queues names <p>No output</p>"},{"location":"documentation/actions/amqp/#example_3","title":"Example","text":"Kotlin <pre><code>AmqpCleanQueuesAction(\n    target = \"RABBITMQ_TARGET\",\n    queueNames = listOf(\n        \"my.queue\",\n        \"my.other.queue\"\n    )\n)\n</code></pre>"},{"location":"documentation/actions/amqp/#create-and-bind-temporary-queue","title":"Create and bind temporary queue","text":"<p>Browse implementation</p> <p>Use this action to create a temporary queue and bind it to an existing exchange using a routing key.</p> InputsOutputs Required Name Type Default Description * <code>exchange-name</code> String Exchange name <code>routing-key</code> String \"queue-name\" The routing key to use for the binding. See this example for more details. * <code>queue-name</code> String Queue name Name Type Description <code>queueName</code> String Created queue name"},{"location":"documentation/actions/amqp/#example_4","title":"Example","text":"Kotlin <pre><code>AmqpCreateBoundTemporaryQueueAction(\n    target = \"RABBITMQ_TARGET\",\n    exchangeName = \"my.exchange\",\n    queueName = \"my.queue\",\n    routingKey = \"children.*\"\n)\n</code></pre> <p>Info</p> <p>At the end of the scenario execution, the created binding and queue will be automatically deleted respectively by amqp-unbind-queue and amqp-delete-queue final actions.</p>"},{"location":"documentation/actions/amqp/#unbind-queue","title":"Unbind queue","text":"<p>Browse implementation</p> <p>Use this action to delete a binding between exchange and queue.</p> Inputs Required Name Type Description * <code>queue-name</code> String Queue name <code>exchange-name</code> String Exchange name <code>routing-key</code> String The routing key used for the binding."},{"location":"documentation/actions/amqp/#example_5","title":"Example","text":"Kotlin <pre><code>AmqpUnbindQueueAction(\ntarget = \"RABBITMQ_TARGET\",\nqueueName = \"my.queue\",\nexchangeName = \"my.exchange\",\nroutingKey = \"children.*\"\n)\n</code></pre>"},{"location":"documentation/actions/amqp/#delete-queue","title":"Delete queue","text":"<p>Browse implementation</p> <p>Use this action to delete an existing queue without regard for whether it is in use or has messages on it.</p> InputsOutputs Required Name Type Description * queue-name String Queue name <p>No output</p>"},{"location":"documentation/actions/amqp/#example_6","title":"Example","text":"Kotlin <pre><code>AmqpDeleteQueueAction(\n    target = \"RABBITMQ_TARGET\",\n    queueName = \"my.queue\"\n)\n</code></pre>"},{"location":"documentation/actions/assertions/","title":"Assertions","text":"Browse implementations <ul> <li>Assertions<ul> <li>Assert</li> <li>JSON Assert</li> <li>XML Assert</li> </ul> </li> <li>Validations<ul> <li>JSON</li> <li>XML</li> </ul> </li> <li>Comparison<ul> <li>Compare</li> <li>JSON Compare</li> </ul> </li> </ul>"},{"location":"documentation/actions/assertions/#assertions","title":"Assertions","text":""},{"location":"documentation/actions/assertions/#assert","title":"Assert","text":"<p>Browse implementation</p> <p>This action takes a list of assertions written using SpEL and validates they are all true.</p> InputsOutputs Required Name Type Default * <code>asserts</code> List of Map <p>No outputs</p>"},{"location":"documentation/actions/assertions/#example","title":"Example","text":"Kotlin <pre><code>AssertAction(\n    asserts = listOf(\n        \"\\${#status==200}\"\n    )\n)\n</code></pre>"},{"location":"documentation/actions/assertions/#json-assert","title":"Json assert","text":"<p>Browse implementation</p> <p>Asserts that JSON nodes have expected values.</p> InputsOutputs Required Name Type Default Description * <code>document</code> String json's string representation * <code>expected</code> Map Keys contain json paths used to extract json node's data.  Values contain expected nodes values or assertions functions. <p>No outputs</p>"},{"location":"documentation/actions/assertions/#example_1","title":"Example","text":"Kotlin <pre><code>JsonAssertAction(\n    document = \"\"\"\n                {\n                    \"something\": {\n                        \"value\": my_value\n                    }\n                }\n               \"\"\",\n    expected = mapOf(\n        \"$.something.value\" to \"my_value\"\n    )\n)\n</code></pre>"},{"location":"documentation/actions/assertions/#xml-assert","title":"Xml assert","text":"<p>Browse implementation</p> <p>Asserts that XML nodes have expected values.</p> InputsOutputs Required Name Type Default Description * <code>document</code> String xml's string representation * <code>expected</code> Map keys contain xml paths used to extract xml node's data. Values contain expected nodes values or assertions functions. <p>No outputs</p>"},{"location":"documentation/actions/assertions/#example_2","title":"Example","text":"Kotlin <pre><code>XmlAssertAction(\n    document =  \"\"\"\n                &lt;root&gt;\n                   &lt;node1 at1=\\\"val3\\\"&gt;\n                       &lt;leaf1&gt;val1&lt;/leaf1&gt;\n                       &lt;leaf2&gt;5&lt;/leaf2&gt;\n                       &lt;leaf3&gt;&lt;![CDATA[val2]]&gt;&lt;/leaf3&gt;\n                   &lt;/node1&gt;\n                &lt;/root&gt;\n                \"\"\",\n    expected = mapOf(\n        \"/root/node1/leaf1\" to \"val1\",\n        \"//leaf2\" to 5,\n        \"//node1/leaf3\" to \"val2\",\n        \"//node1/@at1\" to \"val3\"\n    )\n)\n</code></pre>"},{"location":"documentation/actions/assertions/#assertions-functions","title":"Assertions functions","text":"<p>Placeholders used by xml-assert and json-assert actions to assert actual values.</p> Placeholder Description Example <code>$isNull</code> must be null <code>\"$isNull\"</code> <code>$isNotNull</code> must be not null <code>\"$isNotNull\"</code> <code>$contains</code> must contains given value <code>\"$contains:abcde\"</code> <code>$isBeforeDate</code> must be before given date <code>\"$isBeforeDate:2010-01-01T11:12:13.1230Z\"</code> <code>$isAfterDate</code> must be after given date <code>\"$isAfterDate:1998-07-14T02:03:04.456Z\"</code> <code>$isEqualDate</code> must be equal to given date <code>\"$isEqualDate:2000-01-01T11:11:12.123+01:00\"</code> <code>$matches</code> must match given regex <code>\"$matches:\\\\d{4}-\\\\d{2}-\\\\d{2}\"</code> <code>$isLessThan</code> must be less than given number <code>$isLessThan:42000</code> <code>$isGreaterThan</code> must be greater than given number <code>$isGreaterThan:45</code> <code>$isEmpty</code> string or array must be empty <code>\"$isEmpty\"</code> <code>$lenientEqual</code> must be equal to given json using lenient compare mode <code>\"$lenientEqual:{\\\"object\\\": {\\\"att\\\": \\\"val\\\"}}\"</code> <code>$value[index]</code> array's element at index must have expected value <code>\"$value[0]:three\"</code>"},{"location":"documentation/actions/assertions/#validations","title":"Validations","text":"<p>Step</p> <p>For functional validations, it's recommended to use above actions. For technical validations, it's possible to do them on scenario step validation.</p>"},{"location":"documentation/actions/assertions/#json-validation","title":"Json validation","text":"<p>Browse implementation</p> <p>Validates JSON structure using a given schema.</p> InputsOutputs Required Name Type Default Description * <code>json</code> String json's string representation * <code>schema</code> String json schema <p>No outputs</p>"},{"location":"documentation/actions/assertions/#example_3","title":"Example","text":"Kotlin <pre><code>JsonValidationAction(\n    json = \"\"\"\n           {\n               \"id\": 1,\n               \"name\": \"mouse\",\n               \"price\": 12\n           }\n           \"\"\",\n    schema = \"\"\"\n             {\n                 \"${'$'}schema\": \"http://json-schema.org/draft-04/schema#\",\n                 \"title\": \"Product\",\n                 \"description\": \"A product from the catalog\",\n                 \"type\": \"object\",\n                 \"properties\": {\n                     \"id\": {\n                         \"description\": \"The unique identifier for a product\",\n                         \"type\": \"integer\"\n                     },\n                     \"name\": {\n                         \"description\": \"Name of the product\",\n                         \"type\": \"string\"\n                     },\n                     \"price\": {\n                         \"type\": \"number\",\n                         \"minimum\": 0,\n                         \"exclusiveMinimum\": true\n                     }\n                 },\n                 \"required\": [\"id\", \"name\", \"price\"]\n             }\n            \"\"\"\n)\n</code></pre>"},{"location":"documentation/actions/assertions/#xml-validation","title":"Xml validation","text":"<p>Browse implementation</p> <p>Validates XML structure using a given schema.</p> InputsOutputs Required Name Type Default Description * <code>xml</code> String xml's string representation * <code>xsd</code> String xsd schema path <p>No outputs</p>"},{"location":"documentation/actions/assertions/#example_4","title":"Example","text":"Kotlin <pre><code>XsdValidationAction(\n    xml = \"\"\"\n          &lt;?xml version=\\\"1.0\\\"?&gt;\n          &lt;Employee xmlns=\\\"https://www.chutneytesting.com/Employee\\\"&gt;\n              &lt;name&gt;my Name&lt;/name&gt;\n              &lt;age&gt;29&lt;/age&gt;\n              &lt;role&gt;Java Developer&lt;/role&gt;\n              &lt;gender&gt;Male&lt;/gender&gt;\n          &lt;/Employee&gt;\n          \"\"\",\n    xsdPath = \"/xsd_samples/employee.xsd\"\n)\n</code></pre> XSD files example employee.xsdgender.xsd <pre><code>    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n    &lt;schema xmlns=\"http://www.w3.org/2001/XMLSchema\"\n        targetNamespace=\"https://www.chutneytesting.com/Employee\"\n        xmlns:empns=\"https://www.chutneytesting.com/Employee\"\n        xmlns:gedns=\"https://www.chutneytesting.com/Gender\"\n        elementFormDefault=\"qualified\"&gt;\n        &lt;import namespace=\"https://www.chutneytesting.com/Gender\" schemaLocation=\"./gender.xsd\" /&gt;\n        &lt;element name=\"Employee\" type=\"empns:EmployeeType\"&gt;&lt;/element&gt;\n        &lt;complexType name=\"EmployeeType\"&gt;\n            &lt;sequence&gt;\n                &lt;element name=\"name\" type=\"string\"&gt;&lt;/element&gt;\n                &lt;element name=\"age\" type=\"int\"&gt;&lt;/element&gt;\n                &lt;element name=\"role\" type=\"string\"&gt;&lt;/element&gt;\n                &lt;element name=\"gender\" type=\"gedns:Gender\"&gt;&lt;/element&gt;\n            &lt;/sequence&gt;\n        &lt;/complexType&gt;\n    &lt;/schema&gt;\n</code></pre> <pre><code>    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n    &lt;schema xmlns=\"http://www.w3.org/2001/XMLSchema\"\n           targetNamespace=\"https://www.chutneytesting.com/Gender\"\n           xmlns:gedns=\"https://www.chutneytesting.com/Gender\"\n          elementFormDefault=\"qualified\"&gt;\n        &lt;simpleType name=\"Gender\"&gt;\n            &lt;restriction base=\"string\"&gt;\n                &lt;enumeration value=\"Male\" /&gt;\n                &lt;enumeration value=\"Female\" /&gt;\n            &lt;/restriction&gt;\n        &lt;/simpleType&gt;\n    &lt;/schema&gt;\n</code></pre> <p>XSD schema can be loaded from different paths</p> prefix description example empty load xsd from classpath. It can load also from a jar in classpath <code>xsdPath = \"/xsd_samples/employee.xsd\"</code> <code>classpath:</code> load xsd from classpath. It can load also from a jar in classpath <code>xsdPath = \"classpath:/xsd_samples/employee.xsd\"</code> <code>file:</code> load xsd from file system <code>xsdPath = \"file:C:/my_data/xsd_samples/employee.xsd\"</code>"},{"location":"documentation/actions/assertions/#comparison","title":"Comparison","text":""},{"location":"documentation/actions/assertions/#compare","title":"Compare","text":"<p>Browse implementation</p> <p>Compares two strings using a comparison mode.</p> InputsOutputs Required Name Type Default Description * <code>actual</code> String actual string value * <code>expected</code> String expected string value * <code>mode</code> String comparison mode <p>No outputs</p>"},{"location":"documentation/actions/assertions/#example_5","title":"Example","text":"Kotlin <pre><code>CompareAction(\n    actual = \"chutney\",\n    expected = \"chutney\",\n    mode = \"EQUALS\" // case insensitive\n) \n</code></pre> <p>Available modes</p> mode description <code>equals</code> actual and expected are equals <code>not equals</code> / <code>not-equals</code> actual and expected are not equals <code>contains</code> actual contains expected <code>not-contains</code> / <code>not contains</code> actual doesn't contain expected <code>greater-than</code> / <code>greater than</code> actual is greater than expected <code>less-than</code> / <code>less than</code> actual is less than expected"},{"location":"documentation/actions/assertions/#json-compare","title":"Json compare","text":"<p>Browse implementation</p> <p>Compares two JSON inputs (the whole content or only some nodes) using a comparison mode.</p> InputsOutputs Required Name Type Default Description * <code>document1</code> String first json * <code>document2</code> String second json * <code>comparingPaths</code> Map Map.of(\"$\", \"$\") to be compared nodes json paths * <code>mode</code> String STRICT comparison mode <p>No outputs</p>"},{"location":"documentation/actions/assertions/#example_6","title":"Example","text":"Kotlin <pre><code>    JsonCompareAction(\n        document1 = \"\"\"\n                {\n                    \"something\": {\n                        \"value\": 3\n                    },\n                    \"something_else\": {\n                        \"value\": 5\n                    },\n                    \"a_thing\": {\n                        \"type\": \"my_type\"\n                    }\n                }\n                \"\"\",\n        document2 = \"\"\"\n                {\n                    \"something_else\": {\n                        \"value\": 5\n                    },\n                    \"a_thing\": {\n                        \"type\": \"my_type\"\n                    }\n                }\n                \"\"\",\n        comparingPaths = mapOf(\n            \"$.something.value\" to \"$.something_else.value\",\n            \"$.a_thing\" to \"$.a_thing\"\n        ),\n        mode = JsonCompareMode.STRICT\n    )\n</code></pre> <p>Available modes</p> mode description <code>STRICT</code> strict comparison <code>LENIENT</code> even if the document1 contains extended fields (which document2 doesn't have), the test will still pass"},{"location":"documentation/actions/groovy/","title":"Groovy","text":"<p>Browse implementation</p> <p>This action executes a Groovy script.</p> InputsOutputs Required Name Type Default Description * <code>script</code> String The groovy script to be executed. The last statement must return a Map either implicitly or explicitly.  For a script that just launch background execution, an empty map ([:]) must be the last statement. <code>parameters</code> Map  Key/values parameters to be used in the script Name Type Description <code>status</code> Status enum (Success, Failure) Execution status of the groovy task <code>outputs</code> Map  The map returned by the last statement of the executed script. <p>Example:</p> Kotlin <pre><code>import com.chutneytesting.kotlin.dsl.AssertAction\nimport com.chutneytesting.kotlin.dsl.GroovyAction\nimport com.chutneytesting.kotlin.dsl.Scenario\n\nval my_groovy_scenario = Scenario(title = \"my groovy scenario\") {\n    When(\"I run my script\") {\n        GroovyAction(\n            script = \"\"\"\n                int sum = left + right\n                return ['computation': sum]\n                    \"\"\".trimIndent(),\n            parameters = mapOf(\n                \"left\" to 1,\n                \"right\" to 2\n            )\n        )\n    }\n    Then(\"I check computation\") {\n        AssertAction(\n            asserts = listOf(\n                \"\\${#computation == 3}\"\n            )\n        )\n    }\n}\n</code></pre>"},{"location":"documentation/actions/http/","title":"HTTP","text":"Browse implementations <ul> <li>GET</li> <li>POST</li> <li>PUT</li> <li>DELETE</li> <li>PATCH</li> <li>Start mock server</li> <li>Listened routes</li> </ul> <p>How to request a secured service</p> <p>For all HTTP actions, authentication or secured connexion to a service is configured by setting properties on the target.</p> <ul> <li> <p>Basic Authentication:</p> <ul> <li>To use a basic authorization header, set properties <code>username</code> and <code>password</code> on the target.</li> </ul> </li> <li> <p>SSL:</p> <ul> <li>To use an SSL context, set a <code>keystore</code> or <code>truststore</code> one the target. Properties <code>keystore</code>, <code>keystorePassword</code>, <code>keyPassword</code>, <code>truststore</code> and <code>truststorePassword</code> could be alternatively used.</li> </ul> </li> <li> <p>Proxy, 2 solutions: </p> <ul> <li>You can set a system property http.proxyHost or https.proxyHost, the HTTP client will use this as the default route planner.</li> <li>You can set a target property <code>proxy</code><ul> <li>Default port value is 3128.</li> <li>Target property <code>proxy</code> override system property if set</li> </ul> </li> </ul> </li> </ul> Http target example<pre><code>{\n    \"name\": \"ghibli_movies_http_service\",\n    \"url\": \"https://my.http.service:443/\",\n    \"properties\": {\n        \"username\": \"myUsername\",\n        \"user\": \"myUsername\", // (1)\n        \"userPassword\": \"myPassword\",\n        \"password\": \"myPassword\", // (2)\n        \"trustStore\": \"/home/APP/security/mytruststore.jks\",\n        \"trustStorePassword\": \"myTrustStorePassword\",\n        \"keyStore\": \"/home/APP/security/mykeyStore.jks\",\n        \"keyStorePassword\": \"mykeyStorePassword\",\n        \"keyPassword\": \"myKeyStoreKeyPassword\",\n        \"proxy\": \"https://myproxy:3128\"\n    }\n}\n</code></pre> <ol> <li><code>username</code> or <code>user</code> to define user for basic authentification </li> <li><code>userPassword</code> or <code>password</code> to define password for basic authentification</li> </ol>"},{"location":"documentation/actions/http/#get","title":"Get","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>uri</code> String <code>headers</code> Map&lt;String, String&gt; <code>timeout</code> Duration (String) \"2000 ms\" Name Type <code>status</code> int <code>body</code> String <code>headers</code> HttpHeaders"},{"location":"documentation/actions/http/#example","title":"Example","text":"Kotlin <pre><code>HttpGetAction(\n    target = \"HTTP_TARGET\",\n    uri = \"https://github.com/search?q=chutney\",\n    headers = mapOf(\n      \"Content-Type\" to \"application/json\"\n    ),\n    timeout = \"1 sec\"\n)\n</code></pre>"},{"location":"documentation/actions/http/#post","title":"Post","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>uri</code> String <code>body</code> String <code>{}</code> <code>headers</code> Map&lt;String, String&gt; <code>timeout</code> Duration (String) \"2000 ms\" Name Type <code>status</code> int <code>body</code> String <code>headers</code> HttpHeaders"},{"location":"documentation/actions/http/#example_1","title":"Example","text":"Kotlin <pre><code>HttpPostAction(\n    target = \"HTTP_TARGET\",\n    uri = \"https://github.com/search?q=chutney\",\n    body = \"some content\",\n    headers = mapOf(\n      \"Content-Type\" to \"application/json\"\n    ),\n)\n</code></pre>"},{"location":"documentation/actions/http/#put","title":"Put","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>uri</code> String <code>body</code> String <code>{}</code> <code>headers</code> Map&lt;String, String&gt; <code>timeout</code> Duration (String) \"2000 ms\" Name Type <code>status</code> int <code>body</code> String <code>headers</code> HttpHeaders"},{"location":"documentation/actions/http/#example_2","title":"Example","text":"Kotlin <pre><code>HttpPutAction(\n    target = \"HTTP_TARGET\",\n    uri = \"https://github.com/search?q=chutney\",\n    body = \"some content\",\n    headers = mapOf(\n      \"Content-Type\" to \"application/json\"\n    ),\n)\n</code></pre>"},{"location":"documentation/actions/http/#delete","title":"Delete","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>uri</code> String <code>headers</code> Map&lt;String, String&gt; <code>timeout</code> Duration (String) \"2000 ms\" Name Type <code>status</code> int <code>body</code> String <code>headers</code> HttpHeaders"},{"location":"documentation/actions/http/#example_3","title":"Example","text":"Kotlin <pre><code>HttpDeleteAction(\n    target = \"HTTP_TARGET\",\n    uri = \"https://github.com/search?q=chutney\",\n    headers = mapOf(\n      \"Content-Type\" to \"application/json\"\n    ),\n)\n</code></pre>"},{"location":"documentation/actions/http/#patch","title":"Patch","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>uri</code> String <code>body</code> String <code>{}</code> <code>headers</code> Map&lt;String, String&gt; <code>timeout</code> Duration (String) \"2000 ms\" Name Type <code>status</code> int <code>body</code> String <code>headers</code> HttpHeaders"},{"location":"documentation/actions/http/#example_4","title":"Example","text":"Kotlin <pre><code>HttpPatchAction(\n    target = \"HTTP_TARGET\",\n    uri = \"https://github.com/search?q=chutney\",\n    body = \"some content\",\n    headers = mapOf(\n      \"Content-Type\" to \"application/json\"\n    ),\n)\n</code></pre>"},{"location":"documentation/actions/http/#mocking-an-http-server","title":"Mocking an HTTP Server","text":""},{"location":"documentation/actions/http/#start","title":"Start","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default <code>port</code> String \"8443\" <code>truststore-path</code> String <code>truststore-password</code> String <code>keystore-path</code> String <code>keystore-password</code> String Name Type httpsServer WireMockServer"},{"location":"documentation/actions/http/#example_5","title":"Example","text":"Kotlin <pre><code>HttpsServerStartAction(\n    port = \"8443\",\n    trustStorePath = \"/tmp/trustore.jks\",\n    trustStorePassword = \"password\",\n    keyStorePath = \"/user/admin/keystore\",\n    keyStorePassword = \"keystorepassword\",\n    keyPassword = \"passwordkey\"\n)\n</code></pre> <p>Note</p> <p>This action automatically registers a teardown to stop the server at the end of the scenario.</p>"},{"location":"documentation/actions/http/#listened-routes","title":"Listened routes","text":"<p>Browse implementation</p> <p>This actions allows you to check which requests have been received by a wiremock server. Available verbs are : <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>PATCH</code>, <code>OPTIONS</code>, <code>HEAD</code>, <code>TRACE</code>, <code>ANY</code></p> <p>Warning</p> <p>If this action succeeds, requests will be removed from the Wiremock server.</p> InputsOutputs Required Name Type Default * <code>https-server</code> WireMockServer * <code>uri</code> String (regex) * <code>verb</code> String <code>expected-message-count</code> String 1 Name Type requests List&lt;LoggedRequest&gt;"},{"location":"documentation/actions/http/#example_6","title":"Example","text":"Kotlin <pre><code>HttpsListenerAction(\n    httpServerVarName = \"\\${#httpsServer}\",\n    uri = \"https://github.com/search?q=chutney\",\n    verb = \"GET\",\n    expectedMessageCount = 1,\n)\n</code></pre>"},{"location":"documentation/actions/introduction/","title":"Introduction","text":"Actions <p>Chutney provides a set of capabilities, or <code>Actions</code>, you can use in your scenarios. They replace all the boilerplate code you would have to write and maintain for executing your scenarios. You can see them as a set of small generic clients. <sup>1</sup></p> <p>For example, instead of writing your own HTTP client for doing a POST request, you just have to use the HttpPost action and give it the minimum amount of information as inputs (i.e. targeted service, URI, body and headers).</p> <p>All actions are structured the same way with inputs, outputs, validations and teardown.</p> <p>Extending Chutney actions</p> <p>Actions are extensible, and you can provide your own. For further details, see how to implement your own action and then how to package Chutney with it.</p>"},{"location":"documentation/actions/introduction/#inputs","title":"Inputs","text":"<p>Inputs are the minimum information needed to run the action. For example, if you want to perform an HTTP GET request, you should give, at least, the targeted service and an URI. Obviously, you should be familiar with the technology behind each action you use, and we stick to the proper vocabulary (i.e. body for HTTP, payload for Kafka etc.)</p> <p>Note</p> <ul> <li> <p>Some input values are required and checked for correctness. While other values might not be required, or we provide a default value.</p> </li> <li> <p>All actions performing a request on a remote service need to know the <code>Target</code>. While other action, like validating XML data, don't need a target. Please, refer to actions' configuration for further details.</p> </li> <li> <p>All actions must have a Logger class as input. At runtime a DelagateLogger is automatically injected by the execution engine. This logger contains action's logs which be present in the execution report.</p> </li> </ul>"},{"location":"documentation/actions/introduction/#outputs","title":"Outputs","text":"<p>Outputs contain the data collected after performing an action, and only if it succeeded. These data are set in the execution context and can be accessed and used later in another action.</p> <p>Each action provide a set of default outputs. But they are generic and may contain much more information than what you actually need. In order to process them, you need to use an expression and Chutney functions, so we recommend you to read about them for further details.</p> <p>Note</p> <p>The execution context holds outputs in a key/value map, where the key is a string and the value is typed.</p> <p>Warning</p> <p>Since the execution context is a map, default outputs are overridden if you run the same action more than once in the scenario or if outputs have the same name (key).</p> <p>Tip</p> <p>We strongly recommend you to define your own outputs for setting relevant data in the execution context.</p> KotlinJSON <pre><code>HttpGetAction(\n    target = \"ghibli_movie_service\",\n    uri = \"/all?offset=0&amp;limit=3\",\n    outputs = mapOf(\n        \"bestMovies\" to \"jsonPath(#body, '$.movies[?(@.rating &gt; 85)].title')\".spEL()\n    )\n)\n</code></pre> <pre><code>{\n    \"type\": \"http-get\",\n    \"target\": \"ghibli_movie_service\",\n    \"inputs\": {\n        \"uri\": \"/all?offset=0&amp;limit=3\"\n    },\n    \"outputs\": {\n        \"bestMovies\": \"${#jsonPath(#body, '$.movies[?(@.rating &gt; 85)].title')}\"\n    }\n}\n</code></pre> <p>After executing this action, the execution context will contain the following outputs :</p> Key Type body String status Integer headers org.springframework.http.HttpHeaders bestMovies List <p>Your relevant data can be accessed from another SpEL using <code>#bestMovies</code> and since it is a List you can call methods on it, like so : <code>${#bestMovies.get(0)}</code> <code>#body</code>, <code>#status</code> and <code>#headers</code> are also available but are very likely to be overridden by a following step while you have full control over the use of the <code>#bestMovies</code> key.</p>"},{"location":"documentation/actions/introduction/#validation","title":"Validation","text":"<p>Validations are a list of checks you want to perform in order to validate a step. By default, a step will fail when an error occurs, but we cannot verify the semantic of the result. Asserting a step depends on your feature and requirements.</p> <p>For example, if an HTTP GET request returns a status code 500, the step is technically complete and succeed. But, you may want to fail the step if the status is different from 200.</p> <p>Each validation has a name and evaluates to a boolean, using expressions and functions. </p> KotlinJSON <pre><code>HttpGetAction(\n    target = \"ghibli_movie_service\",\n    uri = \"/all?offset=0&amp;limit=3\",\n    outputs = mapOf(\n        \"bestMovies\" to \"jsonPath(#body, '$.movies[?(@.rating &gt; 85)].title')\".spEL()\n    ),\n    validations = mapOf(\n        \"request_succeed\" to \"status == 200\".spEL(),\n        \"found_2_movies\" to \"bestMovies.size() == 2\".spEL()\n    )\n)\n</code></pre> <pre><code>{\n    \"type\": \"http-get\",\n    \"target\": \"ghibli_movie_service\",\n    \"inputs\": {\n        \"uri\": \"/all?offset=0&amp;limit=3\"\n    },\n    \"outputs\": {\n        \"bestMovies\": \"${#jsonPath(#body, '$.movies[?(@.rating &gt; 85)].title')}\"\n    },\n    \"validations\": {\n        \"request_succeed\": \"${#status == 200}\",\n        \"found_2_movies\": \"${#bestMovies.size() == 2}\"\n    }\n}\n</code></pre>"},{"location":"documentation/actions/introduction/#teardown","title":"Teardown","text":"<p>Sometimes you may need to clean data or come back to a stable state after executing a scenario. Chutney provides a way to do it by registering a <code>final action</code>.</p> <p>Note</p> <p>Some actions will, by default, register a final action. Most often, it is for closing resources. For example, when starting a mock SSH server, we automatically register an action to stop it at the end of the scenario.</p> <p>But we cannot provide more than that, since a teardown depends on your specification and needs.</p> <p>If you need to add your own final action to your scenario, it is not different from a regular action since it is just an action by itself !</p> <p>Register your final action first !</p> <p>Since a scenario execution stops at the first failure, if your final action is in a step after the failure, it will never be registered nor run. So you must register them before.</p> <p>Wrap your final action with its corresponding step !</p> <p>Since you register your final actions before anything, you still don't want to run them all when it does not make sense. To avoid that, the best practice is to wrap it in a step with the corresponding action it cleans.</p> <p>Example</p> <pre><code>Step(\"Insert data in a table\") { // (1)\n    Step(\"Final action : delete data at the end\") { // (2)\n        FinalAction(\n            name = \"Delete data\",\n            type = \"sql\",\n            target = \"my_database\",\n            inputs = mapOf(\n                \"statements\" to listOf(\"DELETE FROM MY_TABLE WHERE id=1\")\n            )\n        )\n    }\n    Step(\"Insert data in MY_TABLE\") { // (3)\n        SqlAction(\n            target = \"my_database\",\n            statements = listOf(\n                \"insert into MY_TABLE (ID, NAME) values(1, 'my_name')\"\n            )\n        )\n    }\n}\n</code></pre> <ol> <li>This is a wrapper step</li> <li>We declare our final action first !</li> <li>We declare our real action after</li> </ol> <ol> <li> <p>Here, you can see the code for all actions. \u21a9</p> </li> </ol>"},{"location":"documentation/actions/jms/","title":"JMS","text":"Browse implementations <ul> <li>Sender</li> <li>Listener</li> <li>Clean queue</li> </ul> <p>Define a jms target</p> <ul> <li>Default <code>connectionFactoryName</code> is <code>ConnectionFactory</code></li> <li>To configure ssl, by default we add these properties in InitialContext : <ul> <li><code>connection.ConnectionFactory.keyStore</code> with <code>keyStore</code> property</li> <li><code>connection.ConnectionFactory.keyStorePassword</code> with <code>keyStorePassword</code> property</li> <li><code>connection.ConnectionFactory.keyStoreKeyPassword</code> with <code>keyPassword</code> property</li> <li><code>connection.ConnectionFactory.trustStore</code> with <code>trustStore</code> property</li> <li><code>connection.ConnectionFactory.trustStorePassword</code> with <code>trustStorePassword</code> property</li> </ul> </li> <li>All configuration beginning with java.naming.* are added to the context </li> <li>Other configuration: In order to provide more configuration, you should prefix all other target properties with <code>jndi.</code>. By example, if you want to add <code>com.specific.vendor.properties</code> key, the key should be <code>jndi.com.specific.vendor.properties</code></li> </ul> Jms target example<pre><code>{\n    \"name\": \"JMS_TARGET\",\n    \"url\": \"ssl://my.jms.server:61616\",\n    \"properties\": {\n        \"connectionFactoryName\": \"MyConnectionFactory\"\n        \"java.naming.factory.initial\": \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\",\n\n        \"username\": \"myUsername\", // (1)\n        \"password\": \"myPassword\", // (2)\n        \"trustStore\": \"/home/APP/security/mytruststore.jks\",\n        \"trustStorePassword\": \"myTrustStorePassword\",\n        \"keyStore\": \"/home/APP/security/mykeyStore.jks\",\n        \"keyStorePassword\": \"mykeyStorePassword\",\n        \"keyPassword\": \"myKeyStoreKeyPassword\",\n    }\n}\n</code></pre> <ol> <li>Valid properties are <code>username</code> or <code>user</code>. Set this for basic authentication</li> <li>Valid properties are <code>userPassword</code> or <code>password</code>. Set this for basic authentication</li> </ol>"},{"location":"documentation/actions/jms/#jms-sender","title":"Jms Sender","text":"<p>Browse implementation</p> Inputs Required Name Type Default * <code>target</code> String * <code>destination</code> String * <code>body</code> String <code>headers</code> Map&lt;String, String&gt; <p>No output. Only a log in report if message was successfully sent</p>"},{"location":"documentation/actions/jms/#example","title":"Example","text":"Kotlin <pre><code>JmsSenderAction(\n    target = \"JMS_TARGET\",\n    destination = \"jms/domain/my/queue\",\n    body = \"my text body\"\n    attributes = mapOf(\n        \"jms.MyProperty\" to \"some value\"\n    )\n)\n</code></pre>"},{"location":"documentation/actions/jms/#jms-listener","title":"Jms Listener","text":"<p>Browse implementation</p> <ul> <li>Only works on javax.jms.TextMessage</li> <li><code>selector</code> used as message filter in createConsumer or in createBrowser</li> <li><code>bodySelector</code> verify in <code>browserMaxDepth</code> messages on the queue if it contains <code>bodySelector</code> characters</li> </ul> InputsOutputs Required Name Type Default * <code>target</code> String * <code>destination</code> String <code>selector</code> String <code>bodySelector</code> String <code>browserMaxDepth</code> Integer <code>timeOut</code> String 500 ms Name Type <code>textMessage</code> String <code>jmsProperties</code> Map"},{"location":"documentation/actions/jms/#example_1","title":"Example","text":"Kotlin <pre><code>JmsListenerAction(\n    target = \"JMS_TARGET\",\n    destination = \"jms/domain/my/queue\",\n    selector = \"type = 'boat' AND color = 'red'\",\n    bodySelector = \"some value to search in message\",\n    browserMaxDepth = 100,\n    timeOut = \"1 s\"\n)\n</code></pre>"},{"location":"documentation/actions/jms/#jms-clean-queue","title":"Jms Clean Queue","text":"<p>Browse implementation</p> <ul> <li>Only works on javax.jms.TextMessage</li> <li><code>selector</code> used as message filter in createConsumer or in createBrowser</li> <li><code>bodySelector</code> verify in <code>browserMaxDepth</code> messages on the queue if it contains <code>bodySelector</code> characters (only works on javax.jms.TextMessage)</li> </ul> Inputs Required Name Type Default * <code>target</code> String * <code>destination</code> String <code>selector</code> String <code>bodySelector</code> String <code>browserMaxDepth</code> Integer <code>timeOut</code> String 500 ms <p>No output. Only a log in report with number of messages removed</p>"},{"location":"documentation/actions/jms/#example_2","title":"Example","text":"Kotlin <pre><code>JmsCleanQueueAction(\n    target = \"JMS_TARGET\",\n    destination = \"jms/domain/my/queue\",\n    selector = \"type = 'boat' AND color = 'red'\",\n    bodySelector = \"some value to search in message\",\n    browserMaxDepth = 100,\n    timeOut = \"1 s\"\n)\n</code></pre>"},{"location":"documentation/actions/kafka/","title":"Kafka","text":"Browse implementations <ul> <li>Publish</li> <li>Consume</li> </ul> <p>Target Configuration</p> <p>For all actions, a target should be defined and have a <code>name</code> and a valid <code>url</code>.</p> minimal configextended config Kafka target example<pre><code>{\n  \"name\": \"my_kafka_target\"\n  \"url\": \"tcp://localhost:60962\"\n}\n</code></pre> Kafka target example<pre><code>{\n    \"name\":\"KAFKA\",\n    \"url\":\"tcp://kafka.server.fr:9095\",\n    \"properties\":[\n        {\n        \"key\":\"ssl.keystore.location\",\n        \"value\":\"/keystores/keys.jks\"\n        },\n        {\n        \"key\":\"security.protocol\",\n        \"value\":\"SSL\"\n        },\n        {\n        \"key\":\"ssl.keystore.password\",\n        \"value\":\"password\"\n        },\n        {\n        \"key\":\"ssl.truststore.password\",\n        \"value\":\"password\"\n        },\n        {\n        \"key\":\"ssl.truststore.location\",\n        \"value\":\"/truststores/trust.jks\"\n        },\n        {\n        \"key\":\"auto.offset.reset\",\n        \"value\":\"earliest\"\n        },\n        {\n        \"key\":\"enable.auto.commit\",\n        \"value\":\"true\"\n        }\n    ]\n}\n</code></pre>"},{"location":"documentation/actions/kafka/#publish","title":"Publish","text":"<p>Browse implementation</p> <p>Use this action to publish a message to a Kafka topic.</p> InputsOutputs Required Name Type Description * <code>target</code> String Kafka target name * <code>topic</code> String Topic where the message will be published * <code>headers</code> Map &lt;String, String&gt; Headers to be sent with the request * <code>payload</code> String Message to be published <code>properties</code> Map &lt;String, String&gt; Configurations for Kafka producer. Name Type Description <code>payload</code> String Sent message <code>headers</code> String Headers to be sent with the request"},{"location":"documentation/actions/kafka/#example","title":"Example","text":"Kotlin <pre><code>KafkaBasicPublishTask(\n    target = \"my_kafka_target\",\n    topic = \"my.queue\",\n    headers = mapOf(\n        \"contentType\" to \"application/json\",\n        \"season\" to \"1\"\n    ),\n    payload = \"\"\"\n                {\n                  \"title\": \"Castle in the Sky\",\n                  \"director\": \"Hayao Miyazaki\",\n                  \"rating\": 78\n                }\n               \"\"\".trimIndent()\n)\n</code></pre>"},{"location":"documentation/actions/kafka/#consume","title":"Consume","text":"<p>Browse implementation</p> <p>Use this action to consume a message from a Kafka topic.</p> InputsOutputs Required Name Type Default Description * <code>target</code> String Kafka target name * <code>topic</code> String Topic from where the message will be consumed * <code>group</code> String Group id of the consumer <code>properties</code> Map &lt;String, String&gt; Configurations for Kafka producer. <code>header-selector</code> String Consume only messages whose headers match this selector. Selector must be a json paths. The root node is message's headers <code>selector</code> String Consume only messages whose headers or payload match this selector. Selector must be json paths or xml paths. The root node is the whole message. <code>nb-messages</code> Integer 1 How many messages to be consumed <code>content-type</code> String <code>application/json</code> To be consumed message's content type <code>timeout</code> Duration <code>60 sec</code> Listening time on the topic <code>ackMode</code> AckMode target's ackMode, else <code>BATCH</code> The offset commit behavior Name Type Description <code>body</code> List&lt;Map&lt;String,Object&gt;&gt; Consumed messages <code>payloads</code> List&lt;String&gt; Consumed messages payloads <code>headers</code> List&lt;String&gt; Consumed messages headers"},{"location":"documentation/actions/kafka/#example_1","title":"Example","text":"Kotlin <pre><code>KafkaBasicConsumeAction(\n    target = \"my_kafka_target\",\n    topic = \"my.queue\",\n    group= \"my.group\",\n    timeout= \"10 sec\",\n    selector= \"\\$..[?(\\$.payload.title==\\\"Castle in the Sky\\\")]\",\n    headerSelector= \"\\$..[?(\\$.season=='1')]\",\n    contentType= \"application/json\"\n)\n</code></pre>"},{"location":"documentation/actions/micrometer/","title":"Micrometer","text":"Browse implementations <ul> <li>Counter</li> <li>Gauge</li> <li>Timer</li> <li>Timer Start</li> <li>Timer Stop</li> <li>Summary</li> </ul> <p>Note</p> <p>Micrometer provides a static global registry. This registry is used as default if no registry is given in action's inputs.</p>"},{"location":"documentation/actions/micrometer/#counter","title":"Counter","text":"<p>Browse Implementation</p> <p>Use this action to report a count metric.</p> InputsOutputs Required Name Type Description if <code>counter</code> is null <code>name</code> String Counter name. if <code>name</code> is null <code>counter</code> Counter Counter instance. <code>description</code> String Counter  description <code>unit</code> String Count unit <code>tags</code> List&lt;String&gt; key,value list representing tags. A tag is a Key/value pair representing a dimension of a meter used to classify and drill into measurements. <code>registry</code> MeterRegistry Creates and manages your application's set of meters * <code>increment</code> Integer as String Positive number by which the counter will be incremented. Name Type Description <code>micrometerCounter</code> Counter The incremented counter"},{"location":"documentation/actions/micrometer/#example","title":"Example","text":"Kotlin <pre><code>MicrometerCounterAction(\n    name = \"products_likes\",\n    description = \"products likes counter\",\n    tags = listOf(\n        \"product\", \"1\",\n        \"liked_feature\", \"color\"\n    ),\n    increment = \"1\"\n)\n</code></pre>"},{"location":"documentation/actions/micrometer/#gauge","title":"Gauge","text":"<p>Browse Implementation</p> <p>Use this action to report a gauge metric.</p> InputsOutputs Required Name Type Description * <code>name</code> String Gauge name. <code>description</code> String Gauge  description if <code>gaugeFunction</code> is null <code>gaugeObject</code> Object Gauge will return the current value of this object . if <code>gaugeObject</code> is null <code>gaugeFunction</code> String Gauge function. <code>unit</code> String Count unit <code>tags</code> List&lt;String&gt; key,value list representing tags. A tag is a Key/value pair representing a dimension of a meter used to classify and drill into measurements. <code>registry</code> MeterRegistry Creates and manages your application's set of meters <code>strongReference</code> Boolean Indicates that the gauge should maintain a strong reference on the object upon which its instantaneous value is determined. Default is False <p>Info</p> <ol> <li>GaugeObject is required and must be a Number, a Collection or a Map if no gaugeFunction supplied.</li> <li>If gaugeFunction is null and gaugeObject is:<ul> <li>a number: the gauge will return it's value.</li> <li>a collection: the gauge will return it's size.</li> <li>a Map: the gauge will return it's size.</li> </ul> </li> <li>If gaugeObject and gaugeFunction are not null: the gauge call gaugeFunction of gaugeObject and return the result value.</li> <li>If gaugeObject is null, gaugeFunction must be a static function.</li> <li>GaugeFunction is required if gaugeObject is null.</li> <li>GaugeFunction shouldn't have parameters.</li> <li>GaugeFunction should return an <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code> or any Number's child class.</li> </ol> Name Type Description <code>micrometerGaugeObject</code> Object <code>gaugeObject</code> input"},{"location":"documentation/actions/micrometer/#example_1","title":"Example","text":"gaugeObject as MapgaugeObject &amp; gaugeFunctiononly gaugeFunction <pre><code>Given(\"I declare my claims collection\") {\n    ContextPutAction(\n        entries = mapOf(\n            \"claims\" to mapOf(\n                \"1\" to listOf(\"claim_1\", \"claim_2\"),\n                \"2\" to listOf(\"claim_3\", \"claim_4\")\n            )\n        )\n    )\n}\nWhen(\"I request my gauge metric\") {\n    MicrometerGaugeAction(\n        name = \"claims_gauge\",\n        description = \"claims gauge\",\n        gaugeObject = \"\\${#claims}\",\n    )\n}\n</code></pre> <pre><code>Given(\"I set the last claim dateTime\") {\n    ContextPutAction(\n        entries = mapOf(\n            \"last_claim_at\" to \"\\${T(java.time.LocalDateTime).now()}\"\n        )\n    )\n}\nWhen(\"I request my last claim day metric\") {\n    MicrometerGaugeAction(\n        name = \"last_claim_date_time_gauge\",\n        description = \"last claim date time gauge\",\n        gaugeObject = \"\\${#last_claim_at}\",\n        gaugeFunction = \"getDayOfMonth\",\n    )\n}\n</code></pre> <p>Supposing that we have class with a static methode that return an int.</p> <pre><code>public class MyClass {\n    public static int getValue(){\n        int result = 0;\n        /*\n        do some thing\n        result = ...\n        */\n        return result;\n    }\n}\n</code></pre> <p>Then we can use this function as gaugeFunction: <pre><code>When(\"I request the gauge metric\") {\n    MicrometerGaugeAction(\n        name = \"gauge name\",\n        description = \"gauge description\",\n        gaugeFunction = \"my_package.myClass.getValue\",\n    )\n}\n</code></pre></p>"},{"location":"documentation/actions/micrometer/#timer","title":"Timer","text":"<p>Browse Implementation</p> <p>Use this action to report a timer metric.</p> InputsOutputs Required Name Type Description if <code>timer</code> is null <code>name</code> String Timer name. <code>description</code> String Timer  description <code>tags</code> List&lt;String&gt; key,value list representing tags. A tag is a Key/value pair representing a dimension of a meter used to classify and drill into measurements <code>bufferLength</code> Integer as String Distribution statistic buffer length <code>expiry</code> Duration Distribution statistic expiry <code>maxValue</code> Duration Timer max duration <code>minValue</code> Duration Timer min duration <code>percentilePrecision</code> Integer as String Percentile precision <code>publishPercentilesHistogram</code> Boolean Publish percentile histogram or not <code>percentiles</code> String Comma separated list of doublepercentiles doubles <code>sla</code> String Comma separated list of doublepercentiles doubles if <code>name</code> is null <code>timer</code> Timer Timer instance. <code>registry</code> MeterRegistry Creates and manages your application's set of meters <code>timeunit</code> TimeUnit  as String Time unit <code>record</code> Duration The timer will be updated by the record duration Name Type Description <code>micrometerTimer</code> Timer The timer"},{"location":"documentation/actions/micrometer/#example_2","title":"Example","text":"Kotlin <pre><code>MicrometerTimerAction(\n    name = \"my_timer\",\n    description = \"my timer description\",\n    record = \"3 s\",\n)\n</code></pre>"},{"location":"documentation/actions/micrometer/#timer-start","title":"Timer start","text":"<p>Browse Implementation</p> <p>Use this action to start a Timer.Sample.</p> InputsOutputs Required Name Type Description <code>registry</code> MeterRegistry Creates and manages your application's set of meters Name Type Description <code>micrometerTimerSample</code> Timer.Sample The sample"},{"location":"documentation/actions/micrometer/#example_3","title":"Example","text":"Kotlin <pre><code>MicrometerTimerStartAction()\n</code></pre>"},{"location":"documentation/actions/micrometer/#timer-stop","title":"Timer stop","text":"<p>Browse Implementation</p> <p>Use this action to stop a Timer.Sample and record its duration into timer.</p> InputsOutputs Required Name Type Description * <code>sample</code> Timer.Sample The previously started sample * <code>timer</code> MeterRegistry Sample's duration will be recorded into this timer <code>timeunit</code> TimeUnit  as String Time unit. Default is SECONDS Name Type Description <code>micrometerTimerSampleDuration</code> Duration The sample recorded duration"},{"location":"documentation/actions/micrometer/#example_4","title":"Example","text":"Kotlin <pre><code>MicrometerTimerStopTask(\n    sample = \"\\${#micrometerTimerSample}\",\n    timer =  \"\\${#micrometerTimer}\"\n)\n</code></pre>"},{"location":"documentation/actions/micrometer/#summary","title":"Summary","text":"<p>Browse Implementation</p> <p>Use this action to report a distribution summary metric.</p> InputsOutputs Required Name Type Description if <code>distributionSummary</code> is null <code>name</code> String Distrubution summary name. <code>description</code> String Distrubution summary description <code>tags</code> List&lt;String&gt; Key,value list representing tags. A tag is a Key/value pair representing a dimension of a meter used to classify and drill into measurements <code>bufferLength</code> Integer as String Distribution statistic buffer length <code>expiry</code> Duration Distribution statistic expiry <code>maxValue</code> Duration Distrubution max duration <code>minValue</code> Duration Distrubution min duration <code>percentilePrecision</code> Integer as String Percentile precision <code>publishPercentilesHistogram</code> Boolean Publish percentile histogram or not <code>percentiles</code> String Comma separated list of doublepercentiles doubles <code>sla</code> String Comma separated list of doublepercentiles doubles <code>scale</code> Double as String Scale value if <code>name</code> is null <code>distributionSummary</code> DistributionSummary Distribution instance. <code>registry</code> MeterRegistry Creates and manages your application's set of meters <code>timeunit</code> TimeUnit  as String Time unit <code>record</code> Double as String The distribution will be updated by the record value Name Type Description <code>micrometerSummary</code> DistributionSummary The distribution summary"},{"location":"documentation/actions/micrometer/#example_5","title":"Example","text":"Kotlin <pre><code>MicrometerSummaryAction(\n    name = \"response_size_summary\",\n    description = \"response size summary\",\n    unit = \"bytes\",\n)\n</code></pre>"},{"location":"documentation/actions/mongo/","title":"MongoDB","text":"Browse implementations <ul> <li>Count</li> <li>Delete</li> <li>Find</li> <li>Insert</li> <li>List Collections</li> <li>Update</li> </ul> <p>Target Configuration</p> <p>For all actions, the target should have a property <code>databaseName</code></p> Mongo target example<pre><code>{\n    \"name\": \"mongo_target\",\n    \"url\": \"mongo://my.mongo.base:27017\",\n    \"properties\": {\n        \"databaseName\": \"myDatabaseName\",\n        \"username\": \"myUsername\", // (1)\n        \"password\": \"myPassword\" // (2)\n    }\n}\n</code></pre> <ol> <li>Valid properties are <code>username</code> or <code>user</code>. Set this for basic authentication</li> <li>Valid properties are <code>userPassword</code> or <code>password</code>. Set this for basic authentication</li> </ol> <p>Collection Example</p> ghibli_movies<pre><code>{\n  \"title\": \"Castle in the Sky\",\n  \"director\": \"Hayao Miyazaki\",\n  \"rating\": 78\n}\n{\n  \"title\": \"Grave of the Fireflies\",\n  \"director\": \"Isao Takahata\",\n  \"rating\": 94\n}\n{\n  \"title\": \"My Neighbor Totoro\",\n  \"director\": \"Hayao Miyazaki\",\n  \"rating\": 86\n}\n</code></pre>"},{"location":"documentation/actions/mongo/#count","title":"Count","text":"<p>!!! info Browse implementations</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>collection</code> String * <code>query</code> String Name Type <code>count</code> long"},{"location":"documentation/actions/mongo/#example","title":"Example","text":"Kotlin <pre><code>MongoCountAction(\n    target = \"mongo_target\",\n    collection = \"ghibli_movies\",\n    query = \"{ rating: { \\$gt: 85 } }\"\n)\n</code></pre>"},{"location":"documentation/actions/mongo/#delete","title":"Delete","text":"<p>!!! info Browse implementations</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>collection</code> String * <code>query</code> String Name Type <code>deletedCount</code> long"},{"location":"documentation/actions/mongo/#example_1","title":"Example","text":"Kotlin <pre><code>MongoDeleteAction(\n    target = \"mongo_target\",\n    collection = \"ghibli_movies\",\n    query = \"{ director: { \\\"Hayao Miyazaki\\\" } }\"\n)\n</code></pre>"},{"location":"documentation/actions/mongo/#find","title":"Find","text":"<p>!!! info Browse implementations</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>collection</code> String * <code>query</code> String <code>limit</code> Integer 20 Name Type <code>documents</code> List&lt;String&gt;"},{"location":"documentation/actions/mongo/#example_2","title":"Example","text":"Kotlin <pre><code>MongoFindAction(\n    target = \"mongo_target\",\n    collection = \"ghibli_movies\",\n    query = \"{ director: { \\\"Hayao Miyazaki\\\" } }\",\n    limit = 42\n)\n</code></pre>"},{"location":"documentation/actions/mongo/#insert","title":"Insert","text":"<p>!!! info Browse implementations</p> Inputs Required Name Type Default * <code>target</code> String * <code>collection</code> String * <code>document</code> String <p>Insert action does not have output.</p>"},{"location":"documentation/actions/mongo/#example_3","title":"Example","text":"Kotlin <pre><code>MongoInsertAction(\n    target = \"mongo_target\",\n    collection = \"ghibli_movies\",\n    document = \"{ title: \\\"Pom Poko\\\", director: \\\"Isao Takahata\\\", rating: 77 }\"\n)\n</code></pre>"},{"location":"documentation/actions/mongo/#list-collections","title":"List Collections","text":"<p>!!! info Browse implementations</p> InputsOutputs Required Name Type Default * <code>target</code> String Name Type <code>collectionNames</code> List&lt;String&gt;"},{"location":"documentation/actions/mongo/#example_4","title":"Example","text":"Kotlin <pre><code>MongoListAction(\n    target = \"mongo_target\"\n)\n</code></pre>"},{"location":"documentation/actions/mongo/#update","title":"Update","text":"<p>!!! info Browse implementations</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>collection</code> String * <code>filter</code> String * <code>update</code> String <code>arrayFilters</code> List&lt;String&gt; <p>Note</p> <p>ArrayFilters are supported since MongoDB v3.5.12+ (https://jira.mongodb.org/browse/SERVER-831)</p> Name Type <code>modifiedCount</code> long"},{"location":"documentation/actions/mongo/#example_5","title":"Example","text":"Kotlin <pre><code>MongoUpdateAction(\n    target = \"mongo_target\",\n    collection = \"ghibli_movies\",\n    filter = \"{ director: { \\\"Hayao Miyazaki\\\" } }\",\n    update = \"{ director: { \\\"Sabur\u014d Akitsu\\\" } }\"\n)\n</code></pre>"},{"location":"documentation/actions/other/","title":"Other","text":""},{"location":"documentation/actions/other/#duration-type","title":"Duration Type","text":"<p>Sometimes, Action input is a String of type Duration. Expected format is <code>&lt;positive number&gt; &lt;unit&gt;</code>. <code>unit</code> values are :</p> <ul> <li>\"nanos\", \"ns\"</li> <li>\"micros\", \"\u00b5s\"</li> <li>\"millis\", \"ms\"</li> <li>\"seconds\", \"s\", \"sec\"</li> <li>\"minutes\", \"m\", \"min\"</li> <li>\"hours\", \"h\", \"hour\", \"hours\", \"hour(s)\"</li> <li>\"days\", \"d\", \"day\", \"days\", \"day(s)\"</li> </ul> <p>Examples : \"5 min\", \"300 sec\", \"1 day\"</p>"},{"location":"documentation/actions/radius/","title":"Radius","text":"Browse implementations <ul> <li>Accounting</li> <li>Authenticate</li> </ul> <p>Define a radius target</p> <p>For all radius actions, target must defined these three properties (See RadiusClient for more details)</p> <ul> <li>sharedSecret</li> <li>authenticatePort</li> <li>accountingPort</li> </ul> Radius target example<pre><code>{\n    \"name\": \"RADIUS_TARGET\",\n    \"url\": \"udp://my.radius.service:1211/\",\n    \"properties\": {\n        \"sharedSecret\": \"a_secret\",\n        \"authenticatePort\": \"1812\",\n        \"accountingPort\": \"1813\"\n    }\n}\n</code></pre>"},{"location":"documentation/actions/radius/#radius-accounting","title":"Radius accounting","text":"<p>Browse implementations</p> InputsOutputs Required Name Type Default Comment * <code>target</code> String * <code>userName</code> String * <code>accountingType</code> Integer between 1 and 15 <code>attributes</code> Map&lt;String, String&gt; Name Type <code>radiusResponse</code> RadiusPacket"},{"location":"documentation/actions/radius/#example","title":"Example","text":"Kotlin <pre><code>RadiusAccountingAction(\n    target = \"RADIUS_TARGET\",\n    userName = \"iotUsername\",\n    attributes = mapOf(\n      \"Framed-IP-Address\" to \"123.456.789.1\"\n      \"Acct-Session-Id\" to \"123456\"\n    ),\n    accountingType = \"1\"\n)\n</code></pre>"},{"location":"documentation/actions/radius/#radius-authenticate","title":"Radius authenticate","text":"<p>Browse implementations</p> <p>Protocols <code>mschapv2</code> and <code>eap</code> are not yet supported by our client. See AccessRequest.encodeRequestAttributes(...)</p> InputsOutputs Required Name Type Default Comment * <code>target</code> String * <code>userName</code> String * <code>userPassword</code> String <code>protocol</code> String <code>pap</code> <code>pap</code> or <code>chap</code> <code>attributes</code> Map&lt;String, String&gt; Name Type <code>radiusResponse</code> RadiusPacket"},{"location":"documentation/actions/radius/#example_1","title":"Example","text":"Kotlin <pre><code>RadiusAuthenticateAction(\n    target = \"RADIUS_TARGET\",\n    userName = \"https://github.com/search?q=chutney\",\n    userPassword = \"some content\",\n    protocol = \"\",\n    attributes = mapOf(\n      \"NAS-identifier\" to \"NAS_OPERATOR\"\n    )\n)\n</code></pre>"},{"location":"documentation/actions/selenium/","title":"Selenium","text":"Browse implementations <ul> <li>Click</li> <li>Close</li> <li>Driver Init</li> <li>Get</li> <li>Get Attribute</li> <li>Get Text</li> <li>Hover ThenClick</li> <li>Quit</li> <li>Remote Driver Init</li> <li>Screenshot</li> <li>Scroll To</li> <li>Send Keys</li> <li>Set Browser Size</li> <li>Switch To</li> <li>Wait</li> </ul> <p>About <code>by</code> input</p> <p>Selenium actions selecting an elements require a selector and specifying the selection type. See Selenium by documentation for further details. Chutney provides the following values :</p> <ul> <li>\"id\" </li> <li>\"name\"</li> <li>\"className\"</li> <li>\"cssSelector\"</li> <li>\"xpath\"</li> <li>\"zk\"</li> </ul> About ZK <p>ZK is an open source Java framework for building web and mobile apps. When using ZK, element IDs are gerenated and managed by the framework. Thus, impossible to know beforehand. But you can get HTML IDs by calling ZK at runtime with JS using the widget's ID. So, Chutney provides it for you.</p> <p>About <code>web-driver</code> input</p> <p>Most actions requires a <code>web-driver</code> input. It's value comes from the output off the actions DriverInit or RemoteDriverInit. So the most probable value for it would come from the execution context : <code>${#webDriver}</code></p> <p>While required in a Chutney scenario, it is set by default using the Chutney Kotlin DSL so you don't need to provide it.</p>"},{"location":"documentation/actions/selenium/#click","title":"Click","text":"<p>Browse Implementation</p> <p>Performs a click on an element. Element is expected to be clickable. See WebElement.click() and ExpectedConditions.elementToBeClickable() for further details.</p> <p>It takes a screenshot in case of error.</p> Inputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String <code>wait</code> Integer 1 seconds"},{"location":"documentation/actions/selenium/#example","title":"Example","text":"Kotlin <pre><code>SeleniumClickAction(\n    selector = \"//button[text()=\\\"Some text\\\"\",\n    by = SELENIUM_BY.xpath\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#close","title":"Close","text":"<p>Browse Implementation</p> <p>This action close the current window, quitting the browser if it's the last window currently open. See WebDriver.close() for further details.</p> Inputs Required Name Type Default * <code>web-driver</code> String"},{"location":"documentation/actions/selenium/#example_1","title":"Example","text":"Kotlin <pre><code>SeleniumCloseAction()\n</code></pre>"},{"location":"documentation/actions/selenium/#driver-init","title":"Driver init","text":"<p>Browse Implementation</p> <p>This action instantiate a webdriver</p> <p>Important</p> <p>Firefox is the default browser and <code>browser</code> input should be empty, but you should provide <code>browserPath</code> input. For using IE, put \"Internet Explorer\" as <code>browser</code> input, <code>browserPath</code> is not required when using IE.</p> IE running options <p>IE runs with the following options :</p> <ul> <li>\"AcceptInsecureCertificates\": true</li> <li>\"disable-popup-blocking\": true</li> <li>\"enablePersistentHover\": true</li> <li>\"ensureCleanSession\": true</li> <li>\"ignoreProtectedModeSettings\": true</li> <li>\"ignoreZoomSetting\": false</li> <li>\"introduceInstabilityByIgnoringProtectedModeSettings\": true</li> <li>\"javascriptEnabled\": true</li> <li>\"nativeEvents\": true</li> <li>\"unexpectedAlertBehaviour\": \"accept\"</li> </ul> FF running options <p>FF runs with the following options :</p> <ul> <li>Headless: true</li> <li>Log level: FATAL</li> </ul> InputsOutputs Required Name Type Default Accepted Value * <code>driverPath</code> String * <code>browserPath</code> String <code>browser</code> String Firefox Internet Explorer Name Type <code>webDriver</code> WebDriver"},{"location":"documentation/actions/selenium/#finally-action","title":"Finally action","text":"<p>Performs the action Quit when the scenario ends.</p>"},{"location":"documentation/actions/selenium/#example_2","title":"Example","text":"Kotlin <pre><code>SeleniumDriverInitAction(\n    browserPath = \"/path/to/the/browser/\",\n    driverPath = \"/path/to/the/webdriver/\"\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#get","title":"Get","text":"<p>Browse Implementation</p> <p>This action load a new web page in the current browser window. See WebDriver.get(String url) for further details.</p> InputsOutputs Required Name Type Note * <code>web-driver</code> String <code>selector</code> String (Weird implemention) Used as a boolean. If null, the page is opened in current window. If not the page is opened in a new window * <code>value</code> String The URL to load. Must be a fully qualified URL Name Type Note <code>outputGet</code> String This value can be used to switch to this window using action SwitchTo. See WebDriver.getWindowHandle() for further details."},{"location":"documentation/actions/selenium/#example_3","title":"Example","text":"Kotlin <pre><code>SeleniumGetAction(\n    url = \"http://www.chutney-testing.com/\" \n)\n</code></pre>"},{"location":"documentation/actions/selenium/#get-attribute","title":"Get attribute","text":"<p>Browse Implementation</p> <p>Get the value of the given attribute of the element. See WebElement.getAttribute() for further details.</p> InputsOutputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String <code>wait</code> Integer 1 seconds <code>attribute</code> String \"value\" Name Type <code>outputAttributeValue</code> String"},{"location":"documentation/actions/selenium/#example_4","title":"Example","text":"Kotlin <pre><code>SeleniumGetAttributeAction(\n    selector = \"usernameInput\",\n    by = SELENIUM_BY.NAME,\n    attribute = \"type\"\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#get-text","title":"Get text","text":"<p>Browse Implementation</p> <p>This action returns the visible (i.e. not hidden by CSS) text of an element, including sub-elements. See WebElement.getText() for further details.</p> InputsOutputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String <code>wait</code> Integer 1 seconds Name Type Note <code>outputGetText</code> String Returns the value of attribute \"value\" when text is empty"},{"location":"documentation/actions/selenium/#example_5","title":"Example","text":"Kotlin <pre><code>SeleniumGetTextAction(\n    selector = \"usernameInput\",\n    by = SELENIUM_BY.NAME,\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#hover-and-click","title":"Hover and click","text":"<p>Browse Implementation</p> <p>Moves the mouse to the middle of the element then performs a click. See Actions.moveToElement() and Click for further details.</p> Inputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String <code>wait</code> Integer 1 seconds"},{"location":"documentation/actions/selenium/#example_6","title":"Example","text":"Kotlin <pre><code>SeleniumHoverThenClickAction(\n    selector = \"myHyperLink\",\n    by = SELENIUM_BY.id\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#quit","title":"Quit","text":"<p>Browse Implementation</p> <p>Important</p> <p>This action is not available with the Kotlin DSL since it is performed by default when the scenario ends.</p> <p>This action quits the driver, closing every associated window. See WebDriver.quit() for further details.</p> Inputs Required Name Type Default * <code>web-driver</code> String"},{"location":"documentation/actions/selenium/#remote-driver-init","title":"Remote driver init","text":"<p>Browse Implementation</p> <p>Note</p> <p><code>browser</code> input values :</p> <ul> <li>\"chrome\"</li> <li>\"internet explorer\"</li> <li>\"firefox\"</li> </ul> Internet Explorer running options <p>IE runs with the following options :</p> <ul> <li>\"AcceptInsecureCertificates\": true</li> <li>\"disable-popup-blocking\": true</li> <li>\"enablePersistentHover\": true</li> <li>\"ensureCleanSession\": true</li> <li>\"ignoreProtectedModeSettings\": true</li> <li>\"ignoreZoomSetting\": false</li> <li>\"introduceInstabilityByIgnoringProtectedModeSettings\": true</li> <li>\"javascriptEnabled\": true</li> <li>\"nativeEvents\": true</li> <li>\"unexpectedAlertBehaviour\": \"accept\"</li> </ul> Firefox running options <p>Firefox runs with the following options :</p> <ul> <li>Headless: false</li> <li>Log level: FATAL</li> </ul> Chrome running options <p>Chrome runs with the following options :</p> <ul> <li>start-maximized: true</li> </ul> InputsOutputs Required Name Type Default Note * <code>hub</code> String The URL of the remote Selenium Hub <code>browser</code> String firefox Name Type <code>webDriver</code> WebDriver"},{"location":"documentation/actions/selenium/#finally-action_1","title":"Finally action","text":"<p>Performs the action Quit when the scenario ends.</p>"},{"location":"documentation/actions/selenium/#example_7","title":"Example","text":"Kotlin <pre><code>SeleniumRemoteDriverInitAction(\n    hub = \"http://my.hub.url:4242/\",\n    browser = \"chrome\"\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#screenshot","title":"Screenshot","text":"<p>Browse Implementation</p> <p>Takes a screenshot, available in the execution report as a Base64 String. See TakesScreenshot.getScreenshotAs() and OutputType.BASE64 for further details.</p> Inputs Required Name Type * <code>web-driver</code> String"},{"location":"documentation/actions/selenium/#example_8","title":"Example","text":"Kotlin <pre><code>SeleniumScreenShotAction()\n</code></pre>"},{"location":"documentation/actions/selenium/#scroll-to","title":"Scroll to","text":"<p>Browse Implementation</p> <p>Scroll the page to make the element visible and align to the top. See Element.scrollIntoView() for further details.</p> Inputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String <code>wait</code> Integer 1 seconds"},{"location":"documentation/actions/selenium/#example_9","title":"Example","text":"Kotlin <pre><code>SeleniumScrollToAction(\n    selector = \"/html/body/form[1]\",\n    by = SELENIUM_BY.xpath\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#send-keys","title":"Send keys","text":"<p>Browse Implementation</p> <p>This action simulate typing into an element, which may set its value. See WebElement.sendKeys()</p> Inputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String * <code>value</code> String The value to type <code>wait</code> Integer 1 seconds"},{"location":"documentation/actions/selenium/#example_10","title":"Example","text":"Kotlin <pre><code>SeleniumSendKeysAction(\n    selector = \"usernameInput\",\n    by = SELENIUM_BY.NAME,\n    value = \"the hitchhiker\"\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#set-browser-size","title":"Set browser size","text":"<p>Browse Implementation</p> <p>This action set the size of the current window. See WebDriver.Window.setSize() for further details.</p> Inputs Required Name Type Default * <code>width</code> Integer * <code>height</code> Integer"},{"location":"documentation/actions/selenium/#example_11","title":"Example","text":"Kotlin <pre><code>SeleniumSetBrowserSizeAction(\n    width = 640,\n    height = 480\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#switch-to","title":"Switch to","text":"<p>Browse Implementation</p> <p>Note</p> <p>By default it selects either the first frame on the page, or the main document when a page contains iframes. See WebDriver.TargetLocator for further details.</p> <p><code>switchType</code> accepted values :</p> <ul> <li>\"Frame\"</li> <li>\"Popup\"</li> <li>\"Window\"</li> <li>\"AlertOk\" (Switch to alert and click on the OK button)</li> <li>\"AlertCancel\" (Switch to alert and click on the Cancel button)</li> </ul> InputsOutputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String <code>wait</code> Integer 1 seconds <code>switchType</code> String Name Type <code>outputSwitchTo</code> This value can be used to switch to this element later."},{"location":"documentation/actions/selenium/#example_12","title":"Example","text":"Kotlin <pre><code>SeleniumSwitchToAction(\n    selector = \"outputGet\".spEL(),\n    by = SELENIUM_BY.id,\n    switchType = SELENIUM_SWITCH.Window\n)\n</code></pre>"},{"location":"documentation/actions/selenium/#wait","title":"Wait","text":"<p>Browse Implementation</p> <p>This action waits N seconds or until the expected conditions are met.</p> <p>About <code>value</code> input</p> <p>Expected conditions can be combined. Available values are :</p> <ul> <li>\"elementToBeSelected\"</li> <li>\"elementToBeClickable\"</li> <li>\"frameToBeAvailableAndSwitchToIt\"</li> <li>\"invisibilityOfElementLocated\"</li> <li>\"visibilityOfElementLocated\"</li> <li>\"visibilityOfAllElementLocated\"</li> <li>\"presenceOfElementLocated\"</li> <li>\"presenceOfAllElementLocated\"</li> <li>\"and\"</li> <li>\"or\"</li> <li>\"not\"</li> </ul> Inputs Required Name Type Default Note * <code>web-driver</code> String * <code>selector</code> String * <code>by</code> String <code>wait</code> Integer 1 seconds <code>value</code> String"},{"location":"documentation/actions/selenium/#example_13","title":"Example","text":"Kotlin <pre><code>SeleniumWaitAction(\n    selector = \"//button[text()=\\\"Some text\\\"\",\n    by = SELENIUM_BY.xpath,\n    value = \"elementToBeClickable\"\n)\n</code></pre>"},{"location":"documentation/actions/soap/","title":"SOAP","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>uri</code> String * <code>body</code> String {} <code>username</code> String <code>password</code> String <code>timeout</code> String (Duration) \"2000 ms\" <code>headers</code> String Name Type <code>status</code> int <code>body</code> String <code>headers</code> HttpHeaders"},{"location":"documentation/actions/soap/#example","title":"Example","text":"Kotlin <pre><code>HttpSoapAction(\n    target = \"HTTP_TARGET\",\n    uri = \"https://github.com/search?q=chutney\",\n    username = \"userprivate\",\n    password = \"userpassword\",\n    headers = mapOf(\n      \"Content-Type\" to \"application/json\"\n    ),\n)\n</code></pre>"},{"location":"documentation/actions/sql/","title":"SQL","text":"<p>Warning</p> <p>Due to legacy naming, there might be confusion with <code>Records</code>, <code>Rows</code>, attributes <code>Records.rows</code> and <code>Records.records</code> and method like <code>Records.getRows()</code>, <code>Records.rows()</code> etc. So read carefully this page.</p> Browse implementations <ul> <li>Action</li> <li>Client</li> </ul> <p>Configuration</p> <p>Most of the configuration is done on the target database.</p> <ul> <li> <p>Database URL: You should configure your target with the property <code>jdbcUrl</code> to provide the JDBC URL of your database.</p> </li> <li> <p>Authentication: You can set target properties <code>username</code> and <code>password</code> if required.</p> </li> <li> <p>Max fetch size: You can set the maximum fetch size using target property <code>maxFetchSize</code> (default to 1000).</p> </li> <li> <p>Other configuration: In order to provide more configuration you should prefix all other target properties with <code>dataSource.</code></p> </li> </ul> Example<pre><code>{\n    \"name\": \"ghibli_movies_database\",\n    \"url\": \"tcp://myoracle.db.server:1531/\",\n    \"properties\": {\n        \"jdbcUrl\": \"jdbc:oracle:thin:@myoracle.db.server:1531/ghibli_movies_service\",\n        \"username\": \"myUsername\",\n        \"password\": \"myPassword\",\n        \"maxFetchSize\": \"100\",\n        \"dataSource.driverClassName\": \"oracle.jdbc.OracleDriver\",\n        \"dataSource.maximumPoolSize\": \"5\"\n    }\n}\n</code></pre> <p>Logging results</p> <p>You can configure the maximum number of results to print in the execution report.</p> <ul> <li>For a global project scope, set the property <code>chutney.actions.sql.max-logged-rows</code>.    </li> <li>For a local step scope, use input value <code>nbLoggedRow</code>. This will override the value set by configuration.</li> </ul> InputsOutputs Required Name Type Default Note * <code>target</code> String * <code>statements</code> List&lt;String&gt; <code>nbLoggedRow</code> Integer 30 Maximum number of rows to log in execution report <p>This action <code>outputs</code> depends on wether you provided only one or many <code>statements</code> input. See following sections for details about each case.</p>"},{"location":"documentation/actions/sql/#outputs-for-one-statement","title":"Outputs for one statement","text":"<p>When you provide only one statement in input, the following outputs and operations using <code>Rows</code> and <code>Row</code> types are available.</p> Outputs Name Type Note <code>rows</code> <code>Rows</code> <code>firstRow</code> <code>Row</code> is an alias for <code>rows.get(0)</code> <code>affectedRows</code> int for non <code>SELECT</code> statements"},{"location":"documentation/actions/sql/#rows","title":"Rows","text":"<p>Browse implementation</p> <p>One <code>Rows</code> instance contains results for one statement. Following attributes and methods are available in SpEL :</p> <ul> <li> <p><code>count()</code>: Returns the number of results from a SELECT statement.   -&gt; <code>${#rows.count()}</code></p> </li> <li> <p><code>get(int index)</code>: Returns the <code>row</code> found at given index (starts at 0) or an empty row if not found   -&gt; <code>${#rows.get(42)}</code></p> </li> <li> <p><code>get(String header)</code>: Returns a list of values (<code>List&lt;Object&gt;</code>) for one column's name   -&gt; <code>${#rows.get(\"TITLE\")}</code></p> </li> <li> <p><code>valuesOf(String... header)</code>: Returns a list of values (<code>List&lt;List&lt;Object&gt;&gt;</code>) for one or many column's name   -&gt; <code>${#rows.valuesOf(\"DIRECTOR\", \"TITLE\")}</code></p> </li> <li> <p><code>asMap()</code>: Transforms the structure as a <code>List&lt;Map&lt;String, Object&gt;&gt;</code>   Where <code>Map&lt;String, Object&gt;</code> represents a row, <code>String</code> is a header and <code>Object</code> an actual value   -&gt; <code>${#rows.asMap()}</code></p> </li> </ul>"},{"location":"documentation/actions/sql/#row","title":"Row","text":"<p>Browse implementation</p> <p>A <code>Row</code> provides you access to a record values.</p> <ul> <li> <p><code>get(String header)</code>: Get the actual value (Object) by column's name   -&gt; <code>${#firstRow.get(\"TITLE\")}</code> or <code>${#rows.get(0).get(\"TITLE\")}</code></p> </li> <li> <p><code>get(int index)</code>: Get the actual value (Object) by column's index   -&gt; <code>${#firstRow.get(4)}</code> or <code>${#rows.get(0).get(4)}</code></p> </li> </ul>"},{"location":"documentation/actions/sql/#example","title":"Example","text":"<p>Here is an example based one the following table :</p> ID TITLE YEAR RATING DIRECTOR 1 \"Castle in the Sky\" 1986-08-02 78 \"Hayao Miyazaki\" 2 \"Grave of the Fireflies\" 1988-04-16 94 \"Isao Takahata\" 3 \"My Neighbor Totoro\" 1988-04-16 86 \"Hayao Miyazaki\" Kotlin <pre><code>SqlAction(\n    target = \"ghibli_movies_database\",\n    statements = listOf(\n        \"SELECT * FROM movies WHERE rating &gt; 85\" // (1)\n    ),\n    nbLoggedRow = 5, // (2)\n    outputs = mapOf(\n        \"numberOfBest\" to \"rows.count()\".spEL(), // (3)\n        \"bestMoviesTitles\" to \"rows.get(\\\"TITLE\\\")\".spEL() // (4)\n    )\n)\n</code></pre> <ol> <li><code>statements</code> has only one entry, so outputs <code>rows</code> and <code>firstRow</code> are available but <code>recordResult</code> is not</li> <li>Will locally override configuration <code>chutney.actions.sql.max-logged-rows</code></li> <li>Expected result is 2</li> <li>Expected result is [\"Grave of the Fireflies\", \"My Neighbor Totoro\"]</li> </ol>"},{"location":"documentation/actions/sql/#outputs-for-many-statements","title":"Outputs for many statements","text":"<p>When you provide more than one statement in input, you get a <code>Records</code> for each statement.</p> Outputs Name Type Note <code>recordResult</code> List&lt;Records&gt; Each <code>Records</code> in the list contains the resulting records of one statement"},{"location":"documentation/actions/sql/#records","title":"Records","text":"<p>Browse implementation</p> <p>One <code>Records</code> instance contains results for one statement and provides methods to retrieve and search them. <code>Records</code> is different from <code>Rows</code> type, but you can convert it using the <code>rows()</code> method.  </p> <p>Following attributes and methods are available in SpEL :</p> <ul> <li> <p><code>affectedRows</code>: Returns the number of affected rows. This is useful for INSERT, UPDATE or DELETE statements -&gt; <code>${#recordResult.get(42).affectedRows}</code></p> </li> <li> <p><code>count()</code>: Returns the number of results from a SELECT statement. -&gt; <code>${#recordResult.get(42).count()}</code></p> </li> <li> <p><code>headers</code>: Returns the list of columns names (List&lt; String &gt;) -&gt; <code>${#recordResult.get(42).headers}</code></p> </li> <li> <p><code>rows()</code>: Converts this <code>Records</code> to the wrapper type <code>Rows</code>. This may be recommended for easier use -&gt; <code>${#recordResult.get(42).rows()}</code></p> </li> <li> <p><code>records</code>: The list of <code>Row</code>. While useful, it is recommended to use <code>rows()</code> instead   -&gt; <code>${#recordResult.get(42).records}</code></p> </li> <li> <p><code>row(int index)</code>: Get the <code>Row</code> at provided index.   -&gt; <code>${#recordResult.get(42).row(1337)}</code> equivalent to <code>${#recordResult.get(42).records.get(1337)}</code></p> </li> <li></li> </ul>"},{"location":"documentation/actions/sql/#example_1","title":"Example","text":"<p>Here is an example based one the following table :</p> ID TITLE YEAR RATING DIRECTOR 1 \"Castle in the Sky\" 1986-08-02 78 \"Hayao Miyazaki\" 2 \"Grave of the Fireflies\" 1988-04-16 94 \"Isao Takahata\" 3 \"My Neighbor Totoro\" 1988-04-16 86 \"Hayao Miyazaki\" Kotlin <pre><code>SqlAction(\n    target = \"ghibli_movies_database\",\n    statements = listOf(\n        \"SELECT * FROM movies WHERE rating &gt; 90\", // (1)\n        \"SELECT * FROM movies WHERE rating &lt; 90\"\n    ),\n    nbLoggedRow = 5, // (2)\n    outputs = mapOf(\n        \"numberOfBest\" to \"recordResult.get(0).rows.count()\".spEL(), // (3)\n        \"bestMoviesTitles\" to \"recordResult.get(0).get(\\\"TITLE\\\")\".spEL() // (4)\n        \"numberOfWorst\" to \"recordResult.get(1).count()\".spEL(), // (5)\n        \"worstMoviesTitles\" to \"recordResult.get(1).get(\\\"TITLE\\\")\".spEL() // (6)\n    )\n)\n</code></pre> <ol> <li><code>statements</code> has two queries, so only the output <code>recordResult</code> is available</li> <li>Will locally override configuration <code>chutney.actions.sql.max-logged-rows</code></li> <li>Get the result for the 1st query, expected output is 1</li> <li>Expected output is [\"Grave of the Fireflies\"]</li> <li>Get the result for the 2nd query, expected output is 2</li> <li>Expected output is [\"My Neighbor Totoro\", \"Castle in the Sky\"]</li> </ol>"},{"location":"documentation/actions/ssh/","title":"SCP / FTP / SSH","text":"Browse implementations <ul> <li>SCP<ul> <li>Client</li> <li>Action - Download</li> <li>Action - Upload</li> </ul> </li> <li>SFTP<ul> <li>Client</li> <li>Action - Download</li> <li>Action - File Info</li> <li>Action - List Dir</li> <li>Action - Upload</li> </ul> </li> <li>SSH Client<ul> <li>Client</li> <li>Action</li> </ul> </li> </ul> <p>Target Authentication</p> <p>You can either use basic authentication or use a private key and a passphrase. </p> target example<pre><code>{\n    \"name\": \"my_target\",\n    \"url\": \"tcp://my.target:4242\",\n    \"properties\": {\n        \"username\": \"myUsername\", // (1)\n        \"password\": \"myPassword\", // (2)\n        \"privateKey\": \"/path/to/the/private/key\", // (3)\n        \"privateKeyPassphrase\": \"myPrivateKeyPassphrase\" // (4)\n    }\n}\n</code></pre> <ol> <li>Valid properties are <code>username</code> or <code>user</code>. Set this for basic authentication</li> <li>Valid properties are <code>userPassword</code> or <code>password</code>. Set this for basic authentication</li> <li>Path to private key file on the machine running Chutney</li> <li>Valid properties are <code>privateKeyPassword</code> or <code>privateKeyPassphrase</code>. Set this for basic authentication</li> </ol>"},{"location":"documentation/actions/ssh/#scp","title":"SCP","text":"<p>Client implementation</p>"},{"location":"documentation/actions/ssh/#download","title":"Download","text":"<p>Browse implementation</p> Inputs Required Name Type Default * <code>target</code> String * <code>source</code> String * <code>destination</code> String <code>timeout</code> String (Duration) <code>5 sec</code> <p>SCP download has no outputs</p>"},{"location":"documentation/actions/ssh/#example","title":"Example","text":"Kotlin <pre><code>ScpDownloadAction(\n    target = \"myTarget\",\n    source = \"/absolute/path/to/the/source/file\", // (1)\n    destination = \"/absolute/path/to/the/destination/file\", // (2)\n    timeout = \"42 ms\"\n)\n</code></pre> <ol> <li>The absolute path of the file to download from the target machine</li> <li>The absolute path of the destination file on the machine running Chutney</li> </ol>"},{"location":"documentation/actions/ssh/#upload","title":"Upload","text":"<p>Browse implementation</p> Inputs Required Name Type Default * <code>target</code> String * <code>source</code> String * <code>destination</code> String <code>timeout</code> String (Duration) <code>5 sec</code> <p>SCP upload has no outputs</p>"},{"location":"documentation/actions/ssh/#example_1","title":"Example","text":"Kotlin <pre><code>ScpUploadAction(\n    target = \"myTarget\",\n    source = \"/absolute/path/to/the/source/file\", // (1)\n    destination = \"/absolute/path/to/the/destination/file\", // (2)\n    timeout = \"42 ms\"\n)\n</code></pre> <ol> <li>The absolute path of the source file on the machine running Chutney</li> <li>The absolute path of the destination file on the target machine</li> </ol>"},{"location":"documentation/actions/ssh/#sftp","title":"SFTP","text":"<p>Client implementation</p>"},{"location":"documentation/actions/ssh/#download_1","title":"Download","text":"<p>Browse implementation</p> Inputs Required Name Type Default * <code>target</code> String * <code>source</code> String * <code>destination</code> String <code>timeout</code> String (Duration) <code>5 sec</code> <p>SFTP download has no outputs</p>"},{"location":"documentation/actions/ssh/#example_2","title":"Example","text":"Kotlin <pre><code>SftpDownloadAction(\n    target = \"myTarget\",\n    source = \"/absolute/path/to/the/source/file\", // (1)\n    destination = \"/absolute/path/to/the/destination/file\", // (2)\n    timeout = \"42 ms\"\n)\n</code></pre> <ol> <li>The absolute path of the file to download from the target machine</li> <li>The absolute path of the destination file on the machine running Chutney</li> </ol>"},{"location":"documentation/actions/ssh/#fileinfo","title":"FileInfo","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>file</code> String <code>timeout</code> String (Duration) <code>5 sec</code> Name Type <code>CreationDate</code> LocalDateTime <code>lastAccess</code> LocalDateTime <code>lastModification</code> LocalDateTime <code>type</code> String <code>owner:group</code> String"},{"location":"documentation/actions/ssh/#example_3","title":"Example","text":"Kotlin <pre><code>SftpFileInfoAction(\n    target = \"myTarget\",\n    file = \"/path/to/file\", // (1)\n    timeout = \"42 ms\"\n)\n</code></pre> <ol> <li>The file path on the target machine</li> </ol>"},{"location":"documentation/actions/ssh/#listdir","title":"ListDir","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default * <code>target</code> String * <code>directory</code> String <code>timeout</code> String (Duration) <code>5 sec</code> Name Type <code>files</code> List&lt;String&gt;"},{"location":"documentation/actions/ssh/#example_4","title":"Example","text":"Kotlin <pre><code>SftpListDirAction(\n    target = \"myTarget\",\n    directory = \"/path/to/directory\", // (1)\n    timeout = \"42 ms\"\n)\n</code></pre> <ol> <li>The directory path on the target machine</li> </ol>"},{"location":"documentation/actions/ssh/#upload_1","title":"Upload","text":"<p>Browse implementation</p> Inputs Required Name Type Default * <code>target</code> String * <code>source</code> String * <code>destination</code> String <code>timeout</code> String (Duration) <code>5 sec</code> <p>SCP upload has no outputs</p>"},{"location":"documentation/actions/ssh/#example_5","title":"Example","text":"Kotlin <pre><code>SftpUploadAction(\n    target = \"myTarget\",\n    source = \"/absolute/path/to/the/source/file\", // (1)\n    destination = \"/absolute/path/to/the/destination/file\", // (2)\n    timeout = \"42 ms\"\n)\n</code></pre> <ol> <li>The absolute path of the source file on the machine running Chutney</li> <li>The absolute path of the destination file on the target machine</li> </ol>"},{"location":"documentation/actions/ssh/#ssh","title":"SSH","text":"<p>Client implementation</p>"},{"location":"documentation/actions/ssh/#client","title":"Client","text":"<p>Browse implementation</p> InputsOutputs Required Name Type Default Values * <code>target</code> String * <code>commands</code> String <code>channel</code> String <code>COMMAND</code> <code>COMMAND</code> or <code>SHELL</code> Name Type <code>results</code> List&lt;CommandResult&gt;"},{"location":"documentation/actions/ssh/#example_6","title":"Example","text":"Kotlin <pre><code>SshClientAction(\n    target = \"myTarget\",\n    commands = listOf(\"{\\\"command: \\\"whoami\\\", timeout:\\\"10 s\\\"\\\"}\"),\n    channel = SSH_CLIENT_CHANNEL.COMMAND\n)\n</code></pre> <ol> <li>Syntax is either a list of String or a List of Command in JSON (ex. {command: \"xxx\", timeout:\"10 s\"})    You can set a timeout for each command, format is a Duration    Default timeout value is 5 seconds</li> </ol>"},{"location":"documentation/actions/ssh/#commandresult","title":"CommandResult","text":"<p>Browse implementation</p> <p>A <code>CommandResult</code> represents the output of one command. The following attributes can be used in SpEL :</p> <ul> <li><code>command</code>: Get the command (Command)   -&gt; <code>${#results.get(0).command}</code></li> <li><code>exitCode</code>: Get the command exit code (int)   -&gt; <code>${#results.get(0).exitCode}</code></li> <li><code>stdout</code>: Get the standard output of the command (String)   -&gt; <code>${#results.get(0).stdout}</code></li> <li><code>stderr</code>: Get the error output of the command (String)   -&gt; <code>${#results.get(0).stderr}</code></li> </ul>"},{"location":"documentation/actions/ssh/#command","title":"Command","text":"<p>Browse implementation</p> <p>The following attributes can be used in SpEL :</p> <ul> <li><code>command</code>: Get the actual command (String)   -&gt; <code>${#command.command}</code></li> <li><code>timeout</code>: Get the command timeout (Duration)   -&gt; <code>${#command.timeout}</code></li> </ul>"},{"location":"documentation/extension/action/","title":"Action","text":"Custom action"},{"location":"documentation/extension/action/#implement","title":"Implement","text":"Custom action 1Custom action 2 <pre><code>package my.custom.package\n\nimport com.chutneytesting.action.spi.Action;\nimport com.chutneytesting.action.spi.injectable.Input;\nimport com.chutneytesting.action.spi.injectable.Logger;\n\npublic class CustomAction implements Action {\n\n    private final Logger logger;\n    private final String parameter;\n\n    public CustomAction(Logger logger,\n                        @Input(\"parameter\") String parameter) {\n        this.logger = logger;\n        this.parameter = parameter;\n    }\n\n    @Override\n    public ActionExecutionResult execute() {\n        logger.info(\"My custom action\");\n        return ActionExecutionResult.ok();\n    }\n\n    @Override\n    public List&lt;String&gt; validateInputs() {\n        return Action.super.validateInputs();\n    }\n}\n</code></pre> <pre><code>package my.custom.package\n\nimport com.chutneytesting.action.spi.Action;\nimport com.chutneytesting.action.spi.injectable.Input;\nimport com.chutneytesting.action.spi.injectable.Logger;\nimport com.chutneytesting.action.spi.injectable.Target\n\npublic class CustomAction2 implements Action {\n\n    private final Target target;\n    private final Logger logger;\n    private final String parameter;\n\n    public CustomAction(Target target,\n                        Logger logger,\n                        @Input(\"parameter\") String parameter) {\n        this.target = target;\n        this.logger = logger;\n        this.parameter = parameter;\n    }\n\n    @Override\n    public ActionExecutionResult execute() {\n        logger.info(\"My custom action\");\n        if (parameter.equals(\"parameter_value\")) {\n            String outputObject = \"output value\";\n            return ActionExecutionResult.ok(Map.of(\"outputKey\", outputObject));\n        } else {\n            logger.error(\"parameter is not valid !\");\n            return ActionExecutionResult.ko();\n        }\n    }\n\n    @Override\n    public List&lt;String&gt; validateInputs() {\n        return Action.super.validateInputs();\n    }\n}\n</code></pre>"},{"location":"documentation/extension/action/#package","title":"Package","text":"<ol> <li> <p>Declare your custom actions full class names inside the file <code>META-INF/extension/chutney.actions</code>.     <pre><code>my.custom.package.CustomAction1\nmy.custom.package.CustomAction2\n</code></pre></p> </li> <li> <p>Add your custom actions' code and meta file in the classpath of a Chutney engine.</p> <p>Custom action starting server debug log</p> <p>Checking your log, you will see something like <pre><code>[main] DEBUG c.c.a.d.DefaultActionTemplateRegistry - Action registered: custom-action-1 (my.custom.package.CustomAction1)\n[main] DEBUG c.c.a.d.DefaultActionTemplateRegistry - Action registered: custom-action-2 (my.custom.package.CustomAction2)\n</code></pre></p> </li> </ol> <p>Add custom actions to an already packaged Chutney server</p> <ol> <li>Package a JAR archive with your custom actions and associated meta file.</li> <li>Use the <code>loader.path</code> Java system properties to add your archive to classpath.</li> </ol>"},{"location":"documentation/extension/action/#use","title":"Use","text":"Kotlin 1Kotlin 2 <pre><code>CustomAction(\n    parameter = \"parameter_value\"\n)\n</code></pre> <pre><code>CustomAction2(\n    target = \"CUSTOM_TARGET\",\n    parameter = \"some value\",\n)\n</code></pre>"},{"location":"documentation/extension/function/","title":"Function","text":"Custom function <p>When you need a custom function which is not provided by Chutney, you can implement it and load it to your chutney server.</p>"},{"location":"documentation/extension/function/#implement","title":"Implement","text":"<ul> <li>Create a new java class.</li> <li>Declare a static method and implement it.</li> <li>Annotate it with <code>@SpelFunction</code>.</li> </ul> <p>Warning</p> <p>Method overloading does not work with SpEL.</p> Custom function <pre><code>    package my.custom.package;\n\n    import com.chutneytesting.action.spi.SpelFunction;\n    import org.apache.commons.lang3.StringUtils;\n\n    public class MyCustomFunctions {\n\n        @SpelFunction\n        public static int stringSum(String a, String b) {\n            int right = StringUtils.isNoneBlank(a) ? Integer.valueOf(a) : 0;\n            int left = StringUtils.isNoneBlank(b) ? Integer.valueOf(b) : 0;\n            return left + right;\n        }\n}\n</code></pre>"},{"location":"documentation/extension/function/#package","title":"Package","text":"<ol> <li> <p>Declare your custom actions full class names inside the file <code>META-INF/extension/chutney.functions</code>.    <pre><code>my.custom.package.MyCustomFunctions\n</code></pre></p> </li> <li> <p>Add your custom functions' code and meta file in the classpath of a Chutney engine.</p> <p>Custom function starting server debug log</p> <p>Check your server log, you will see something like <pre><code>[main] DEBUG c.c.e.d.e.evaluation.SpelFunctions - Loading function: stringSum (MyCustomFunctions)\n</code></pre></p> </li> </ol> <p>Add custom functions to an already packaged Chutney server</p> <ol> <li>Package a JAR archive with your custom functions and associated meta file.</li> <li>Use the <code>loader.path</code> Java system properties to add your archive to classpath.</li> </ol>"},{"location":"documentation/extension/function/#use","title":"Use","text":"<p>Call your custom function from your Kotlin scenario.</p> <pre><code>    import com.chutneytesting.kotlin.dsl.AssertAction\n    import com.chutneytesting.kotlin.dsl.Scenario\n\n    val my_scenario = Scenario(title = \"my scenario\") {\n        When(\"I test my string sum function\") {\n            AssertAction(\n                asserts = listOf(\n                    \"stringSum('1', '2') == 3\".spEL(),\n                    \"stringSum('1', null) == 1\".spEL(),\n                    \"stringSum(null, '2') == 2\".spEL(),\n                    \"stringSum(null, null) == 0\".spEL(),\n                ),\n            )\n        }\n    }\n</code></pre>"},{"location":"documentation/extension/strategy/","title":"Strategy","text":"<p>Coming Soon</p>"},{"location":"documentation/functions/classpath/","title":"Classpath","text":"<p>Browse implementation</p>"},{"location":"documentation/functions/classpath/#resourcecontent","title":"resourceContent","text":"<p>String resourceContent(String name, String charset)</p> <p>See Files.readString() for further details</p> <p>Returns :</p> <ul> <li>Returns the content of the resource.</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#resourceContent(\"name\", \"UTF-8\")}</code></p>"},{"location":"documentation/functions/classpath/#resourcepath","title":"resourcePath","text":"<p>String resourcePath(String name)</p> <p>See Path.toString() for further details</p> <p>Returns :</p> <ul> <li>Returns the string representation of this path.</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#resourcePath(\"name\")}</code></p>"},{"location":"documentation/functions/classpath/#resourcespath","title":"resourcesPath","text":"<p>String resourcesPath(String name)</p> <p>Finds all the resources with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code.</p> <p>See ClassLoader.getResources() for further details</p> <p>Returns :</p> <ul> <li>Returns an enumeration of URL objects for the resource. If no resources could be found, the enumeration will be empty.</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#resourcesPath(\"name\")}</code></p>"},{"location":"documentation/functions/datetime/","title":"Dates & Time","text":"<p>Browse implementation</p> <p>Following functions help you write and shorten SpEL when you need to handle time or date values.</p>"},{"location":"documentation/functions/datetime/#currenttimemillis","title":"currentTimeMillis","text":"<p>String currentTimeMillis()</p> <p>Returns a String of the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.</p> <p>See System.currentTimeMillis() for further details</p> <p>Returns :</p> <ul> <li>A String of the current time in milliseconds</li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.util.String).valueOf(T(java.lang.System).currentTimeMillis())}</code></p> <p>SpEL with    : <code>${#currentTimeMillis()}</code></p>"},{"location":"documentation/functions/datetime/#date","title":"date","text":"<p>Temporal date(String date, String... format)</p> <p>See Date(Temporal) &amp; DateTimeFormatter.parseBest() for further details</p> <p>Parameters :</p> <ul> <li><code>String date</code> : The date you want to get a Temporal from<ul> <li>ex. \"27 July 2022\"</li> </ul> </li> <li><code>String format</code> : The format used for the date (optional, default to ISO)<ul> <li>ex. \"dd MMMM yyyy\"</li> </ul> </li> </ul> <p>Returns : The given date as a <code>Temporal</code></p> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.format.DateTimeFormatter).ofPattern(T(java.time.format.DateTimeFormatter).ISO_INSTANT).parseBest(\"27 July 2022\", ZonedDateTime::from, LocalDateTime::from, LocalDate::from, Instant::from)}</code></p> <p>SpEL with    : <code>${#date(\"27 July 2022\")}</code></p>"},{"location":"documentation/functions/datetime/#dateformatter","title":"dateFormatter","text":"<p>DateTimeFormatter dateFormatter(String pattern)</p> <p>Creates a formatter from a given pattern. ex. Pattern <code>d MMM uuuu</code> will format date <code>2011-12-03</code> to <code>3 Dec 2011</code>.</p> <p>See DateTimeFormatter.ofPattern() for further details</p> <p>Returns :</p> <ul> <li>A <code>DateTimeFormatter</code></li> <li>Or throws an IllegalArgumentException if the pattern is not valid.</li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.format.DateTimeFormatter).ofPattern(\"d MMM uuuu\")}</code></p> <p>SpEL with    : <code>${#dateFormatter(\"d MMM uuuu\")}</code></p>"},{"location":"documentation/functions/datetime/#dateformatterwithlocale","title":"dateFormatterWithLocale","text":"<p>DateTimeFormatter dateFormatterWithLocale(String pattern, String locale)</p> <p>Creates a formatter from a given pattern and given locale.</p> <p>See DateTimeFormatter.ofPattern() for further details</p> <p>Returns :</p> <ul> <li>A <code>DateTimeFormatter</code></li> <li>Or throws an IllegalArgumentException if the pattern is not valid.</li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.format.DateTimeFormatter).ofPattern(\"d MMM uuuu\", new java.util.Locale(\"en\"))}</code></p> <p>SpEL with    : <code>${#dateFormatterWithLocale(\"d MMM uuuu\", \"en\")}</code></p>"},{"location":"documentation/functions/datetime/#isodateformatter","title":"isoDateFormatter","text":"<p>DateTimeFormatter isoDateFormatter(String type)</p> <p>See isoDateFormatter(DateTimeFormatter) for further details</p> <p>Parameters :</p> <ul> <li>Possible values are :<ul> <li>\"INSTANT\"</li> <li>\"ZONED_DATE_TIME\"</li> <li>\"DATE_TIME\"</li> <li>\"DATE\"</li> <li>\"TIME\"</li> <li>\"LOCAL_DATE_TIME\"</li> <li>\"LOCAL_DATE\"</li> <li>\"LOCAL_TIME\"</li> <li>\"OFFSET_DATE_TIME\"</li> <li>\"OFFSET_DATE\"</li> <li>\"OFFSET_TIME\"</li> <li>\"ORDINAL_DATE\"</li> <li>\"ISO_WEEK_DATE\"</li> <li>\"BASIC_DATE\"</li> <li>\"RFC_DATE_TIME\"</li> </ul> </li> </ul> <p>Returns :</p> <ul> <li>A <code>DateTimeFormatter</code></li> <li>Or throws an IllegalArgumentException if the value is unknown.</li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.format.DateTimeFormatter).ISO_INSTANT}</code></p> <p>SpEL with    : <code>${#isoDateFormatter(\"INSTANT\")}</code></p>"},{"location":"documentation/functions/datetime/#now","title":"now","text":"<p>ZonedDateTime now()</p> <p>Returns the current date-time from the system clock.</p> <p>See ZonedDateTime.now() for further details</p> <p>Returns :</p> <ul> <li>The current date-time as a <code>ZonedDateTime</code></li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.ZonedDateTime).now()}</code></p> <p>SpEL with    : <code>${#now()}</code></p>"},{"location":"documentation/functions/datetime/#timeamount","title":"timeAmount","text":"<p>TemporalAmount timeAmount(String text)</p> <p>Create a TemporalAmount from a given string. This is usefull when combine with other methods or functions.</p> <p>See timeAmount(TemporalAmount) for further details</p> <p>Returns :</p> <ul> <li>A <code>TemporalAmount</code></li> </ul> <p>Examples :</p> <p>SpEL without : <code>${#now().plus(T(java.time.Duration).parse(\"6 hours\"))}</code></p> <p>SpEL with    : <code>${#now().plus(#timeAmount(\"6 hours\"))}</code></p>"},{"location":"documentation/functions/datetime/#timeunit","title":"timeUnit","text":"<p>ChronoUnit timeUnit(String unit)</p> <p>See timeUnit(ChronoUnit) for further details</p> <p>Parameters :</p> <ul> <li>Possible values are :<ul> <li>\"nanos\", \"ns\"</li> <li>\"micros\", \"\u00b5s\"</li> <li>\"millis\", \"ms\"</li> <li>\"seconds\", \"s\", \"sec\"</li> <li>\"minutes\", \"m\", \"min\"</li> <li>\"hours\", \"h\", \"hour\", \"hours\", \"hour(s)\"</li> <li>\"days\", \"d\", \"day\", \"days\", \"day(s)\"</li> <li>\"weeks\"</li> <li>\"months\"</li> <li>\"years\"</li> <li>\"decades\"</li> <li>\"centuries\"</li> <li>\"millennia\"</li> <li>\"eras\"</li> <li>\"forever\"</li> </ul> </li> </ul> <p>Returns :</p> <ul> <li>A <code>ChronoUnit</code></li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.temporal.ChronoUnit).valueOf(\"hours\".toUpperCase())}</code></p> <p>SpEL with    : <code>${#timeUnit(\"h\")}</code></p>"},{"location":"documentation/functions/datetime/#zonerules","title":"zoneRules","text":"<p>ZoneRules zoneRules(String zoneId)</p> <p>Gets the time-zone rules for this zone id allowing calculations to be performed.</p> <p>See ZoneId.of(zoneId) and     ZoneId.getRules() for further details</p> <p>Parameters :</p> <ul> <li><code>String zoneId</code> : The zone id you want to get rules from<ul> <li>ex. \"GMT\", \"Z\", \"+02:00\"</li> </ul> </li> </ul> <p>Returns :</p> <ul> <li>A <code>ZoneRules</code></li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.ZoneId).of('Z').getRules().nextTransition(T(java.time.Instant).now())}</code></p> <p>SpEL with    : <code>${#zoneRules('Z').nextTransition(#now())}</code></p>"},{"location":"documentation/functions/datetime/#systemzonerules","title":"systemZoneRules","text":"<p>ZoneRules systemZoneRules()</p> <p>Gets the time-zone rules for the system default zone id allowing calculations to be performed.</p> <p>See ZoneId.systemDefault() and     ZoneId.getRules() for further details</p> <p>Returns :</p> <ul> <li>A <code>ZoneRules</code></li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.time.ZoneId).systemDefault().getRules().nextTransition(T(java.time.Instant).now())}</code></p> <p>SpEL with    : <code>${#systemDefault().nextTransition(#now())}</code></p>"},{"location":"documentation/functions/escape/","title":"Escape","text":"<p>Browse implementation</p> <p>Following functions help you escape and unescape strings from JSON, HTML, XML and SQL.</p> <p>The class StringEscapeUtils from Apache commons text library is used under the hood.</p>"},{"location":"documentation/functions/escape/#json","title":"JSON","text":"<p>String escapeJson(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#escapeJson(\"text\")}</code></p> <p>String unescapeJson(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#unescapeJson(\"text\")}</code></p>"},{"location":"documentation/functions/escape/#html","title":"HTML","text":"<p>String escapeHtml3(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#escapeHtml13(\"text\")}</code></p> <p>String escapeHtml4(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#escapeHtml14(\"text\")}</code></p> <p>String unescapeHtml3(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#unescapeHtml3(\"text\")}</code></p> <p>String unescapeHtml4(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#unescapeHtml4(\"text\")}</code></p>"},{"location":"documentation/functions/escape/#sql","title":"SQL","text":"<p>String escapeSql(String sql)</p> <p>Examples :</p> <p>SpEL : <code>${#escapeSql(\"sql\")}</code></p>"},{"location":"documentation/functions/escape/#xml","title":"XML","text":"<p>String unescapeXml(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#unescapeXml(\"text\")}</code></p> <p>String escapeXml10(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#escapeXml10(\"text\")}</code></p> <p>String escapeXml11(String text)</p> <p>Examples :</p> <p>SpEL : <code>${#escapeXml11(\"text\")}</code></p>"},{"location":"documentation/functions/generate/","title":"Random values","text":"<p>Browse implementation</p> <p>Following functions help you generate random values.</p>"},{"location":"documentation/functions/generate/#file","title":"File","text":"<p>String file()</p> <p>Generate a file with a default size of 1kB, in the default OS temp directory. File name is prefixed with chutney</p> <p>Returns :</p> <ul> <li>The canonical path of the file</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.file()}</code></p> <p>String file(int fileSize)</p> <p>Generate a file with a size of n bytes, in the default OS temp directory. File name is prefix with chutney and maximum file size is 100MB (104857600 bytes).</p> <p>Returns :</p> <ul> <li>The canonical path of the file</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.file(42)}</code></p> <p>String file(String destination, int fileSize)</p> <p>Generate a file with a size of n bytes, with a specific path and filename. Maximum file size is 100MB (104857600 bytes).</p> <p>Returns :</p> <ul> <li>The canonical path of the file</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.file(\"/path/to/dest/file\", 42)}</code></p>"},{"location":"documentation/functions/generate/#identifier","title":"Identifier","text":"<p>String id(String prefix, int length)</p> <p>Generate a String with a given prefix and n random characters.</p> <p>Returns :</p> <ul> <li>The generated String</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.id(\"prefix-\", 6)}</code> -&gt; ex. output <code>prefix-r4nd0m</code></p> <p>String id(int length, String suffix)</p> <p>Generate a String with n random characters and a given suffix.</p> <p>Returns :</p> <ul> <li>The generated String</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.id(6, \"-suffix\")}</code> -&gt; ex. output <code>r4nd0m-suffix</code></p> <p>String id(String prefix, int length, String suffix)</p> <p>Generate a String with a given prefix, n random characters and a given suffix.</p> <p>Returns :</p> <ul> <li>The generated String</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.id(\"pre-\", 6, \"-suf\")}</code> -&gt; ex. output <code>pre-r4nd0m-suf</code></p>"},{"location":"documentation/functions/generate/#int","title":"Int","text":"<p>String randomInt(int bound)</p> <p>Generate a random int value between 0 (included) and a given bound value (excluded) (i.e <code>[0, bound[</code>).</p> <p>See Random.nextInt(int) for further details</p> <p>Returns : </p> <ul> <li>The random int value as a String</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.randomInt(42)}</code></p>"},{"location":"documentation/functions/generate/#long","title":"Long","text":"<p>String randomLong()</p> <p>Generate a random long value.</p> <p>See Random.nextLong() for further details</p> <p>Returns :</p> <ul> <li>The generated long value as a String</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#generate.randomLong()}</code></p>"},{"location":"documentation/functions/generate/#uuid","title":"UUID","text":"<p>String uuid()</p> <p>Generates a unique identifier (UUID). </p> <p>See UUID.uuid() for further details</p> <p>Returns :</p> <ul> <li>The UUID as a String</li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.util.UUID).randomUUID().toString()}</code></p> <p>SpEL with    : <code>${#generate.uuid()}</code></p>"},{"location":"documentation/functions/introduction/","title":"Introduction","text":"Functions <p>Chutney provides a set of procedures, or <code>Functions</code>, you can use in your scenarios' expressions. They allow to read scenarios and their executions reports with a better functional point of view. You can see them as a set of aliases, allowing to simplify the processing of scenario execution context variables. <sup>1</sup></p> <p>Those are based on spEL Functions.</p> <p>Extending Chutney functions</p> <p>Actions are extensible, and you can provide your own. For further details, see how to implement your own function and then how to package Chutney with it.</p>"},{"location":"documentation/functions/introduction/#example","title":"Example","text":"<p>Let's say you made an HTTP request which get some json movies' list and put it in context variable <code>body</code>. You now want to get the list of movie titles rated above 85/100 from it, in order to make an assertion.</p> Existing 'body' variable in context<pre><code>{\n    \"movies\": [\n        {\n            \"title\": \"Castle in the Sky\",\n            \"director\": \"Hayao Miyazaki\",\n            \"rating\": 78\n        },\n        {\n            \"title\": \"Grave of the Fireflies\",\n            \"director\": \"Isao Takahata\",\n            \"rating\": 94\n        },\n        {\n            \"title\": \"My Neighbor Totoro\",\n            \"director\": \"Hayao Miyazaki\",\n            \"rating\": 86\n        }\n    ]\n}\n</code></pre> <p>The best way to filter and extract the relevant data from a JSON document is to use a JSONPath expression. Here is the one for our example : <code>$.movies[?(@.rating &gt; 85)].title</code></p> <p>In order to process it, you would need to write code using a JSONPath library and then tell Chutney to run your custom code. Here is a raw expression you could write : <code>${T(com.jayway.jsonpath.JsonPath).parse(#body).read(\"$.movies[?(@.rating &gt; 85)].title\")}</code> In this case you can use the <code>jsonPath</code> function, provided by Chutney, and the resulting SpEL would become : <code>${#jsonPath(#body, '$.movies[?(@.rating &gt; 85)].title')}</code></p> <ol> <li> <p>Here, you can see the code for all functions. \u21a9</p> </li> </ol>"},{"location":"documentation/functions/json/","title":"JSON","text":"<p>Browse implementation</p> <p>Following functions help you handle JSON documents.</p> <p>All functions accept an input parameter <code>document</code> of any type</p>"},{"location":"documentation/functions/json/#jsonpath","title":"JsonPath","text":"<p>Object jsonPath(Object document, String jsonPath)</p> <p>Read the given JSON path from the given document.</p> <p>Parameters :</p> <ul> <li><code>document</code> : The document in which the path will be executed</li> <li><code>jsonPath</code> : The JSON path to read</li> </ul> <p>Returns : The read result</p> <p>Examples :</p> <p>SpEL : <code>${#jsonPath(#json, '$.key[0]')}</code></p>"},{"location":"documentation/functions/json/#jsonserialize","title":"JsonSerialize","text":"<p>String jsonSerialize(Object obj)</p> <p>Serialize given object as a JSON string.</p> <p>Parameters :</p> <ul> <li><code>obj</code> : The object to serialize</li> </ul> <p>Returns : The result JSON string</p> <p>Examples :</p> <p>SpEL : <code>${#jsonSerialize(#anyObj)}</code></p>"},{"location":"documentation/functions/json/#jsonset","title":"JsonSet","text":"<p>String jsonSet(Object document, String path, String value)</p> <p>Set an existing key value into a given JSON document.</p> <p>Parameters :</p> <ul> <li><code>document</code> : The document to update</li> <li><code>path</code> : The path in the document to update</li> <li><code>value</code> : The new value to set</li> </ul> <p>Returns : The result JSON string</p> <p>Examples :</p> <p>SpEL : <code>${#jsonSet(#json, '$.keyToSet', 'new value')}</code></p>"},{"location":"documentation/functions/json/#jsonsetmany","title":"JsonSetMany","text":"<p>String jsonSetMany(Object document, Map map) <p>Set existing keys values into a given JSON document.</p> <p>Parameters :</p> <ul> <li><code>document</code> : The document to update</li> <li><code>map</code> : A map of paths in the document to update associated with the new values to set</li> </ul> <p>Returns : The result JSON string</p> <p>Examples :</p> <p>SpEL : <code>${#jsonSetMany(#json, {'$.path1': 'new value1', '$.path2': 'new value2'})}</code></p>"},{"location":"documentation/functions/json/#jsonmerge","title":"JsonMerge","text":"<p>String jsonMerge(Object documentA, Object documentB)</p> <p>Merge a given JSON document into another.</p> <p>Parameters :</p> <ul> <li><code>documentA</code> : The document to update</li> <li><code>documentB</code> : The document to set</li> </ul> <p>Returns : The result JSON string</p> <p>Examples :</p> <p>SpEL : <code>${#jsonMerge(#jsonBase, #jsonToAdd)}</code></p>"},{"location":"documentation/functions/micrometer/","title":"Micrometer","text":"<p>Browse implementation</p> <p>Following functions help you work with Micrometer application monitoring facade.</p> <p>MeterRegistry micrometerRegistry(String registryClassName)</p> <p>Retrieve an existing Micrometer registry by its class name.</p> <p>Parameters :</p> <ul> <li><code>registryClassName</code> : The searched Micrometer registry class name</li> </ul> <p>Returns : The searched registry or global registry if not found</p> <p>Examples :</p> <p>SpEL : <code>${#micrometerRegistry('CustomMeterRegistry')}</code></p>"},{"location":"documentation/functions/network/","title":"Network","text":"<p>Browse implementation</p> <p>Following functions help you to :</p> <ul> <li>Generate IP</li> <li>Generate network mask</li> <li>Find available UDP and TCP ports</li> </ul>"},{"location":"documentation/functions/network/#hostipmatching","title":"HostIpMatching","text":"<p>String hostIpMatching(String regex)</p> <p>Return a local ip matching <code>regex</code> input or else <code>InetAddress.getLocalHost().getHostAddress()</code> if no ip matching the regex found</p> <p>Returns :</p> <ul> <li>Return a String representing an IP address matching the <code>regex</code>. For example <code>\"127.0.0.1\"</code></li> </ul> <p>Examples :</p> <p>SpEL : <code>${#hostIpMatching(\"127.0.*\")}</code></p>"},{"location":"documentation/functions/network/#randomnetworkmask","title":"RandomNetworkMask","text":"<p>String randomNetworkMask()</p> <p>Constructs a random network mask matching regex <code>^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$</code>.</p> <p>Returns :</p> <ul> <li>Returns a String representing a network mask. For example <code>\"145.242.119\"</code></li> </ul> <p>Examples :</p> <p>SpEL : <code>${#randomNetworkMask()}</code></p>"},{"location":"documentation/functions/network/#tcpport","title":"TcpPort","text":"<p>int freeSystemPort()</p> <p>Find a free port given by the undelying system.</p> <p>Returns :</p> <ul> <li>Returns an available TCP Port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#freeSystemPort()}</code></p> <p>int tcpPort()</p> <p>Find an available TCP port randomly selected from the range [1024, 65535].</p> <p>Returns :</p> <ul> <li>Returns an available TCP Port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#tcpPort()}</code></p> <p>SortedSet tcpPorts(int num) <p>Find the requested number of available TCP ports, each randomly selected from the range [1024, 65535].</p> <p>Returns :</p> <ul> <li>Returns a sorted set of available TCP port numbers</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#tcpPorts(2000)}</code></p> <p>int tcpPortMin(int minPort)</p> <p>Find an available TCP port randomly selected from the range [minPort, 65535].</p> <p>Returns :</p> <ul> <li>Returns an available TCP port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#tcpPortMin(4455)}</code></p> <p>int tcpPortMinMax(int minPort, int maxPort)</p> <p>Find an available TCP port randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns an available TCP port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#tcpPortMinMax(1400, 62335)}</code></p> <p>SortedSet tcpPortsMinMax(int num, int minPort, int maxPort) <p>Find the requested number of available TCP ports, each randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns a sorted set of available TCP port numbers</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#tcpPortsMinMax(420, 500, 1000)}</code></p> <p>int tcpPortRandomRange(int range)</p> <p>Find an available TCP port randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns an available TCP port number </li> </ul> <p>Examples :</p> <p>SpEL : <code>${#tcpPortRandomRange(120)}</code></p> <p>SortedSet tcpPortsRandomRange(int num, int range) <p>Find the requested number of available TCP ports, each randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns a sorted set of available TCP port numbers</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#tcpPortsRandomRange(120, 230)}</code></p>"},{"location":"documentation/functions/network/#udpport","title":"UdpPort","text":"<p>int udpPort()</p> <p>Find an available UDP port randomly selected from the range [1024, 65535].</p> <p>Returns :</p> <ul> <li>Returns an available UDP port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#udpPort()}</code></p> <p>SortedSet udpPorts(int num) <p>Find the requested number of available UDP ports, each randomly selected from the range [1024, 65535].</p> <p>Returns :</p> <ul> <li>Returns a sorted set of available UDP port numbers</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#udpPorts(2500)}</code></p> <p>int udpPortMin(int minPort)</p> <p>Find an available UDP port randomly selected from the range [minPort, 65535].</p> <p>Returns :</p> <ul> <li>Returns an available UDP port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#udpPortMin(2331)}</code></p> <p>int udpPortMinMax(int minPort, int maxPort)</p> <p>Find an available UDP port randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns an available UDP port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#udpPortMinMax(250, 1544)}</code></p> <p>SortedSet udpPortsMinMax(int num, int minPort, int maxPort) <p>Find the requested number of available UDP ports, each randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns a sorted set of available UDP port numbers</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#udpPortsMinMax(342, 250, 1544)}</code></p> <p>int udpPortRandomRange(int range)</p> <p>Find an available UDP port randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns an available UDP port number</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#udpPortRandomRange(152)}</code></p> <p>SortedSet udpPortsRandomRange(int num, int range) <p>Find the requested number of available UDP ports, each randomly selected from the range [minPort, maxPort].</p> <p>Returns :</p> <ul> <li>Returns a sorted set of available UDP port numbers</li> </ul> <p>Examples :</p> <p>SpEL : <code>${#udpPortsRandomRange(152, 12)}</code></p>"},{"location":"documentation/functions/nullable/","title":"Handling null","text":"<p>Browse implementation</p> <p>This function helps you handle values which may be null.</p> <p>Object nullable(Object input)</p> <p>See Optional.ofNullable() for further details</p> <p>Returns :</p> <ul> <li>The typed value or the String \"null\" in case the value was null.</li> </ul> <p>Examples :</p> <p>SpEL without : <code>${T(java.util.Optional).ofNullable(#mayBeNull).orElse(\"null\")}</code></p> <p>SpEL with    : <code>${#nullable(#mayBeNull)}</code></p>"},{"location":"documentation/functions/soap/","title":"SOAP","text":"<p>Browse implementation</p> <p>Following functions help you work with SOAP.</p> <p>String soapInsertWSUsernameToken(String user, String password, String envelope)</p> <p>Creates WS username token, build an associated security header and inserts it as child into the given SOAP Envelope.</p> <p>Parameters :</p> <ul> <li><code>user</code> : The username to use</li> <li><code>password</code> : The password to use</li> <li><code>envelope</code> : The soap envelope to update</li> </ul> <p>Returns : The soap envelope with the security header</p> <p>Examples :</p> <p>SpEL : <code>${#soapInsertWSUsernameToken('username', 'password', #soapEnvelope)}</code></p>"},{"location":"documentation/functions/string/","title":"String","text":"<p>Browse implementation</p> <p>This function helps you modify strings.</p> <p>String stringReplace(String input, String regularExpression, String replacement)</p> <p>Replaces by another value all occurrences of a given pattern found in a string.</p> <p>Parameters :</p> <ul> <li><code>input</code> : The primary string</li> <li><code>regularExpression</code> : The regular expression to match to</li> <li><code>replacement</code> : The replacement string</li> </ul> <p>Returns : The derived string</p> <p>Examples :</p> <p>SpEL with    : <code>${#stringReplace(\"Hello\", \"l+\", \"r\")}</code></p>"},{"location":"documentation/functions/wiremock/","title":"Wiremock","text":"<p>Browse implementation</p> <p>Following functions help you work with a Wiremock LoggedRequest.</p>"},{"location":"documentation/functions/wiremock/#wiremockheaders","title":"wiremockHeaders","text":"<p>Map wiremockHeaders(LoggedRequest request) <p>Extract headers from a given Wiremock logged request.</p> <p>Parameters :</p> <ul> <li><code>request</code> : The logged request</li> </ul> <p>Returns : The request's headers as a map</p> <p>Examples :</p> <p>SpEL : <code>${#wiremockHeaders(#request)}</code></p>"},{"location":"documentation/functions/wiremock/#wiremockqueryparams","title":"wiremockQueryParams","text":"<p>Map wiremockQueryParams(LoggedRequest request) <p>Extract query parameters from a given Wiremock logged request.</p> <p>Parameters :</p> <ul> <li><code>request</code> : The logged request</li> </ul> <p>Returns : The request's query parameters as a map</p> <p>Examples :</p> <p>SpEL : <code>${#wiremockQueryParams(#request)}</code></p>"},{"location":"documentation/functions/xpath/","title":"XPath","text":"<p>Browse implementation</p> <p>Following functions help you execute XPath request on XML document.</p> <p>Important</p> <p>Those functions have two specific behaviors :</p> <ul> <li>Return the first value in the XPath query result set type-cast to the return type of this XPathExpression. </li> <li>Try hard to return strings, i.e. try to unwrap, when possible, the dom element, attribute or element CDATA.</li> </ul> <p>Therefore, the object returned type could be :</p> <ul> <li>String</li> <li>Element</li> <li>Generic type of the xpath expression</li> </ul>"},{"location":"documentation/functions/xpath/#xpath","title":"xpath","text":"<p>Object xpath(String documentAsString, String xpath)</p> <p>Execute an XML path on a given document.</p> <p>Parameters :</p> <ul> <li><code>documentAsString</code> : The XML document against which the path will be executed.</li> <li><code>xpath</code> : The XML path to execute</li> </ul> <p>Returns : The read result</p> <p>Examples :</p> <p>SpEL : <code>${#xpath(#xmlString, '//element[@attribute='value']')}</code></p>"},{"location":"documentation/functions/xpath/#xpathns","title":"xpathNs","text":"<p>Object xpathNs(String documentAsString, String xpath, Map nsPrefixes) <p>Execute an XML path on a given document with the given namespaces prefixes map.</p> <p>Parameters :</p> <ul> <li><code>documentAsString</code> : The XML document against which the path will be executed.</li> <li><code>xpath</code> : The XML path to execute</li> <li><code>nsPrefixes</code> : A map of prefixes associated with XML namespaces</li> </ul> <p>Returns : The read result</p> <p>Examples :</p> <p>SpEL : <code>${#xpathNs(#xmlString, '//ns1:element[@attribute='value']', {'ns1': 'http://namespace.uri'})}</code></p>"},{"location":"getting_started/demo/","title":"Demo","text":"<p>If you want to have a quick tour of Chutney, a demonstration container could be launched locally.</p> <p>Launch demonstration container</p> <ol> <li>Checkout chutney</li> <li>From the example directory, execute the command <pre><code>    docker compose -f ./.docker/dev-docker-compose-demo.yml up -d\n</code></pre></li> <li>Access the web interface in your browser with url http://localhost</li> <li>Log in with one of predefined user : reader, editor, executor or admin, with associated password like the user name capitalized</li> <li>Browse at your will the interface !!</li> </ol>"},{"location":"getting_started/demo/#whats-in","title":"What's in","text":"<p>This demo Chutney instance has some scenarios and associated campaigns, showing SQL, JSON and XML processing, which could be played with.</p>"},{"location":"getting_started/demo/#sql-examples","title":"SQL examples","text":"<p>The service tested is Chutney itself. Two scenarios are defined :</p> <ul> <li>Check that there is some scenarios to execute</li> <li>Check that last execution of every defined scenario is in success</li> </ul> <p>A campaign grouping these two scenarios is defined.</p>"},{"location":"getting_started/demo/#json-examples","title":"JSON examples","text":"<p>The service tested is SWAPI. Two scenarios are defined :</p> <ul> <li>Check that the root api list all available resources</li> <li>Check that all people resources are valid against a local schema</li> </ul> <p>A campaign grouping these two scenarios is defined.</p>"},{"location":"getting_started/demo/#xml-examples","title":"XML examples","text":"<p>The service tested is ARXIV. Two scenarios are defined :</p> <ul> <li>Check that there is some articles about software testing</li> <li>Check that search response is valid against a local atom feed schema</li> </ul> <p>A campaign grouping these two scenarios is defined.</p>"},{"location":"getting_started/demo/#supervision-bonus","title":"Supervision bonus","text":"<p>Besides the Chutney server service, the demonstration container starts two others services, which demonstrates how to do a supervision :</p> <ul> <li>A monitoring system with time series which collects the Chutney server metrics. We chose Prometheus for this demo</li> <li>An observability system with three sample dashboards. We chose Grafana for this demo</li> </ul> <p>Access demonstration container supervision</p> <ol> <li>Access the web interface in your browser with url http://localhost:3000</li> <li>Log in as admin/admin and choose a new admin password</li> <li>Choose one of three dashboards available at http://localhost:3000/dashboards</li> <li>Additionnaly, the prometheus time series are shown at http://localhost:9090/tsdb-status</li> </ol>"},{"location":"getting_started/requirements/","title":"Requirements","text":""},{"location":"getting_started/requirements/#introduction","title":"Introduction","text":"<p>With Chutney you can write and run functional scenarios. Those scenarios validate high level requirements and are not tied to your application code.</p> <p>Instead, you will target I/O interfaces of your application (i.e. HTTP endpoints, Kafka topics, AMQP queues, etc.) without writing the same boilerplate code for respective clients, consumers, or even mock clients or producers.</p> <p>To get you started, we will cover how to write scenarios with the Chutney Kotlin DSL and run them with JUnit5.</p>"},{"location":"getting_started/requirements/#minimal-setup","title":"Minimal Setup","text":"<p>Requirements</p> <ul> <li><code>java</code> 17 or later and Kotlin</li> <li>your preferred build tool (ex. <code>maven</code>, <code>gradle</code>, etc.)</li> <li>your preferred test engine (ex. <code>Junit 5.x</code>, <code>TestNG</code>, etc.)</li> </ul> Building a Kotlin project <p>In order to build your Kotlin project, you may need to add the following configuration with maven :</p> maven <pre><code>&lt;build&gt;\n    &lt;sourceDirectory&gt;${project.basedir}/src/main/kotlin&lt;/sourceDirectory&gt;\n    &lt;testSourceDirectory&gt;${project.basedir}/src/test/kotlin&lt;/testSourceDirectory&gt;\n\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;1.9.21&lt;/version&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;compile&lt;/id&gt;\n                    &lt;phase&gt;compile&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;compile&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;test-compile&lt;/id&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;test-compile&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>"},{"location":"getting_started/requirements/#dependencies","title":"Dependencies","text":"<p>Create a Kotlin project with the following dependencies :</p> <ul> <li>com.chutneytesting:chutney-kotlin-dsl</li> <li>org.jetbrains.kotlin:kotlin-stdlib</li> <li>org.junit.jupiter:junit-jupiter-api</li> </ul> mavengradle <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.chutneytesting&lt;/groupId&gt;\n        &lt;artifactId&gt;chutney-kotlin-dsl&lt;/artifactId&gt; &lt;!--(1)--&gt;\n        &lt;version&gt;3.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n   &lt;dependency&gt;\n        &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n        &lt;artifactId&gt;kotlin-stdlib&lt;/artifactId&gt; &lt;!--(2)--&gt;\n        &lt;version&gt;1.9.21&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n        &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n        &lt;version&gt;5.10.1&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n        &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt; &lt;!-- Optional (3) --&gt;\n        &lt;version&gt;5.10.1&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <ol> <li>Required for using the Chutney Kotlin DSL</li> <li>Required for compiling Kotlin project</li> <li>Only required if you want to run your test within IntelliJ with the gutter icon </li> </ol> <pre><code>dependencies {\n    implementation(\"com.chutneytesting:chutney-kotlin-dsl:3.0.0\")\n\n    testImplementation(kotlin(\"test\"))\n    testImplementation(\"org.junit.jupiter:junit-jupiter-api:5.10.1\")\n    testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine:5.10.1\")\n}\n</code></pre>"},{"location":"getting_started/run/","title":"Run your scenario","text":"<p>Now, in order to run your first scenario, you need to configure your project and build tool according to your preferences.</p> <p>Chutney Kotlin DSL provides a JUnit 5 Runner with annotations.</p> <p>It provides also a <code>Launcher</code> class you can use the way you want. You are free to run your scenarios when and anywhere you want (be it in a <code>main</code> if you wish).</p> <p>In the following sections :</p> <ul> <li>you will see how to use the JUnit 5 Runner and annotations.</li> <li>you will see how to use the <code>Launcher</code> in a standard test, attached to the <code>integration</code> phase and run using the maven failsafe plugin.</li> </ul>"},{"location":"getting_started/run/#using-chutney-junit5-engine","title":"Using Chutney JUnit5 Engine","text":"<p>When using the JUnit5 engine, we recommend you to use JSON files to declare your environments and targets.</p> <p>Create a Kotlin file (ex. <code>Junit5SearchFeat.kt</code>) with the following content :</p> SearchFeat.kt<pre><code>package com.chutneytesting.getstart\n\nimport com.chutneytesting.kotlin.dsl.ChutneyScenario\nimport com.chutneytesting.kotlin.annotations.ChutneyTest\n\nclass Junit5SearchFeat {\n\n    @ChutneyTest(environment = \"ENVIRONMENT\")\n    fun testMethod(): ChutneyScenario {\n        return search_scenario\n    }\n}\n</code></pre>"},{"location":"getting_started/run/#using-chutney-launcher","title":"Using Chutney Launcher","text":"<p>Under <code>src/test/kotlin</code> create a package (ex. <code>com.chutneytesting.getstart</code>) and create a Kotlin file (ex. <code>SearchFeat.kt</code>) with the following content :</p> SearchFeat.kt<pre><code>package com.chutneytesting.getstart\n\nimport com.chutneytesting.kotlin.launcher.Launcher\nimport org.junit.jupiter.api.Test\n\nclass SearchFeat {\n    @Test\n    fun `search on the world wide web`() {\n        Launcher().run(search_scenario, environment)\n    }\n}\n</code></pre> Configure your build tool mavengradle <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;\n    &lt;configuration&gt;\n        &lt;includes&gt;\n            &lt;include&gt;**/*Feat.*&lt;/include&gt;\n        &lt;/includes&gt;\n    &lt;/configuration&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;integration-test&lt;/goal&gt;\n                &lt;goal&gt;verify&lt;/goal&gt;\n            &lt;/goals&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n            &lt;version&gt;5.10.1&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code>actions.test {\n    filter {\n        includeTestsMatching(\"*Feat\")\n    }\n    useJUnitPlatform()\n}\n</code></pre>"},{"location":"getting_started/run/#run-it","title":"Run it !","text":"<p>Now you can simply run <code>mvn verify</code> or <code>./gradlew test</code>.</p> <p>If you are using Maven, the console will output the resulting execution :</p> <pre><code>[SUCCESS] scenario: \"Search documents\" on environment The World Wide Web # (1)\n[SUCCESS] I visit a search engine [default]  # (2)\n&gt;&gt; Validation [http 200] : OK # (3)\nhttp-get { uri: \"/\"} # (4)\non { search_engine: https://www.google.fr } # (5)\n[SUCCESS] I am on the front page [default]\nsuccess { }\n</code></pre> <ol> <li>Scenario succeed and was run on environment \"The World Wide Web\"</li> <li>Step <code>I visit a search engine</code> succeed and was performed with the <code>default</code> strategy</li> <li>Step validation on the HTTP status succeed</li> <li>Information about which action was performed and with which parameters</li> <li>Information about the target on which the action was performed</li> </ol>"},{"location":"getting_started/write/","title":"Write your first scenario","text":"<p>In order to write a scenario, you also need to declare environments and services you want to test.</p>"},{"location":"getting_started/write/#define-your-test-environment","title":"Define your test environment","text":""},{"location":"getting_started/write/#declare-a-target","title":"Declare a target","text":"<p>Under <code>src/main/kotlin</code> create a package (ex. <code>com.chutneytesting.getstart</code>) and create a Kotlin file (ex. <code>Environments.kt</code>) with the following content :</p> Environments.kt<pre><code>package com.chutneytesting.getstart\n\nimport com.chutneytesting.kotlin.dsl.ChutneyTarget\n\nval google = ChutneyTarget(\n        name = \"search_engine\",\n        url = \"https://www.google.fr\"\n)\n</code></pre> <ul> <li>The target name <code>search_engine</code> is used as a reference in your scenarios</li> <li>The <code>google</code> variable is a reference to set a target in an <code>environment</code></li> </ul>"},{"location":"getting_started/write/#declare-an-environment","title":"Declare an environment","text":"<p>Now you can declare an <code>environment</code> within the same file, add the following content :</p> Environments.kt<pre><code>val environment = ChutneyEnvironment(\n        name = \"The World Wide Web\",\n        description = \"The World Wide Web\",\n        targets = listOf(\n                google\n        )\n)\n</code></pre> <ul> <li>We reference the target <code>google</code> using the variable name.</li> <li>The environment <code>name</code> and <code>description</code> can be anything meaningful to you. The name will be shown in the execution report.</li> <li>The variable name <code>environment</code> is a reference to set the environment on running tests</li> </ul>"},{"location":"getting_started/write/#define-your-test-environment-alternative","title":"Define your test environment (alternative)","text":"<p>There is another way to declare environments and targets by using JSON files.</p> <p>Create a folder <code>.chutney/environments</code> in your project root folder. Then, create a file <code>environment.json</code> with the following content :</p> <pre><code>{\n    \"name\" : \"World Wide Web\",\n    \"description\" : \"The World Wide Web\",\n    \"targets\": [\n        {\n            \"name\" : \"search_engine\",\n            \"url\" : \"https://www.google.fr\"\n        }\n    ]\n}\n</code></pre> <p>An environment is already defined on your Chutney server?</p> <p>If you have already defined an environment on your Chutney server, you can import it by calling <code>synchroniseLocal</code> function of <code>EnvironmentSynchronizeService</code>:</p> <p><pre><code>    import EnvironmentSynchronizeService\n    import com.chutneytesting.kotlin.util.ChutneyServerInfo\n\n    fun main() {\n        val chutneyLocalServer = ChutneyServerInfo(\n            remoteServerUrl = \"https://localhost:8081\",\n            remoteUserName = \"admin\",\n            remoteUserPassword = \"admin\"\n        )\n\n        val environmentSynchronizeService = EnvironmentSynchronizeService()\n\n        environmentSynchronizeService.synchroniseLocal(serverInfo = chutneyLocalServer)\n   }\n</code></pre> <code>synchroniseLocal</code> function parameters:</p> name type Required default description <code>serverInfo</code> <code>ChutneyServerInfo</code> * holds needed information to connect to chutney server <code>environmentsPath</code> <code>String</code> <code>.chutney/environments</code> where to save the imported environments <code>force</code> <code>Boolean</code> <code>false</code> if true, locally existing environments files will be overridden.Else they will be kept unchanged"},{"location":"getting_started/write/#write-a-scenario","title":"Write a scenario","text":"<p>Under <code>src/main/kotlin</code>, in the same package or another, create a Kotlin file (ex. <code>Scenarios.kt</code>) with the following content :</p> Scenarios.kt<pre><code>package com.chutneytesting.getstart\n\nimport com.chutneytesting.kotlin.dsl.HttpGetAction\nimport com.chutneytesting.kotlin.dsl.Scenario\nimport com.chutneytesting.kotlin.dsl.SuccessAction\nimport com.chutneytesting.kotlin.dsl.spEL\n\nval search_scenario = Scenario(title = \"Search documents\") {\n    When(\"I visit a search engine\") {\n        HttpGetAction(\n                target = \"search_engine\",\n                uri = \"/\",\n                validations = mapOf(\"request accepted\" to \"status == 200\".spEL())\n        )\n    }\n    Then(\"I am on the front page\") {\n        SuccessAction()\n    }\n}\n</code></pre> <ul> <li>The scenario title <code>Search documents</code> will be shown in the execution report.</li> <li>There are 2 steps <code>When I visit a search engine</code> and <code>Then I am on the front page</code></li> <li>The first step will execute an HTTP GET call on the target name <code>search_engine</code> on the uri <code>/</code><ul> <li>It also has one validation <code>request accepted</code> to check the response code status is 200.</li> </ul> </li> <li>The second step does nothing meaningful in this example</li> </ul> <p>Et voil\u00e0 !</p> <p>You have successfully setup and written your first scenario using Chutney. Now, you will see how to run it ! </p>"},{"location":"installation/advanced_topics/","title":"Advanced topics","text":"<p>Following section shows how to configure the Spring Boot server.</p>"},{"location":"installation/advanced_topics/#liquibase","title":"Liquibase","text":"<p>Coming Soon</p>"},{"location":"installation/advanced_topics/#metrics","title":"Metrics","text":"<p>Since Chutney relies on Spring Boot Actuator and Micrometer autoconfiguration, it includes Prometheus by default. So you can find and use default metrics : JVM, System, Datasource, Loggers, Executors and Spring MVC metrics.</p> <p>Moreover, Chutney provides following metrics and corresponding Micrometer tags :</p> <ul> <li><code>scenario_execution_count</code> counter (execution status, scenario id, scenario tags) is incremented after a scenario execution.</li> <li><code>scenario_execution_timer</code> timer (execution status, scenario id, scenario tags) is recorded after a scenario execution.</li> <li><code>scenario_in_campaign_gauge</code> gauge (campaign id, execution status) counts the scenario execution status after a campaign execution.</li> <li><code>campaign_execution_count</code> counter (campaign id, campaign title, execution status) is incremented after a campaign execution.</li> <li><code>campaign_execution_timer</code> timer (campaign id) is recorded after a campaign execution.</li> </ul> <p>Important</p> <p>We won't thoroughly document how to collect and manage your metrics outside Chutney (even if the demo includes one). Some hints could be :</p> <ul> <li>Use the Actuator Prometheus endpoint to get the metrics with the appropriate format</li> <li>Use push solution (Prometheus Pushgateway or custom)</li> </ul>"},{"location":"installation/advanced_topics/#authentication","title":"Authentication","text":"<p>Important</p> <p>Maven module local-dev shows :</p> <ul> <li>How to use in memory authentication and roles, see the <code>mem-auth</code> profile  </li> <li>How to use a custom LDAP authentication (for example purpose, it uses an embedded LDAP server)  </li> <li>How to use a OIDC provider authentication (for example purpose, it uses a local server)</li> </ul> <p>Chutney uses Spring Security for :</p> <ul> <li>Basic authentication</li> <li>Enforce authentication and check authorization on API (ex. admin rights Spring Boot Actuator endpoints)</li> <li>Configuring in memory users and roles with the Spring profile <code>mem-auth</code> if needed</li> </ul> How to use in memory Spring profile <code>mem-auth</code> <ul> <li>Activate the profile</li> </ul> <pre><code>spring:\n    profiles:\n        active:\n          - mem-auth\n</code></pre> <ul> <li>Declare users and roles</li> </ul> <pre><code>chutney:\n  security:\n    users:\n      -\n        id: user\n        name: user\n        firstname: user\n        lastname: user\n        mail: user@user.com\n        password: user-password-bcrypt\n        roles: # (1)!\n          - role-with-admin-in-it\n</code></pre> <ol> <li>Optional, if the role include the characters 'admin', ignoring case, all permissions will be granted to that user.</li> </ol> <p>Warning</p> <p>If you create a role name including characters 'admin' (ignoring case), all permissions will be granted to users with this role.</p> <p>If you want to add another authentication mechanism, you should follow the Spring security architecture.</p> <p>Authentication requirements</p> <p>The principal build by the authentication mechanism must be an instance of the Chutney UserDto.</p> <p>User roles and permissions are configured either with Web app form or by editing the file.</p> <p>One could use the existing AuthenticationService Chutney Spring Bean to retrieve Chutney roles by user id and grant associated authorities. </p> <p>How to manage permissions</p> <ul> <li>A user can only have one role</li> <li>Chutney permissions are defined in the Authorization class.</li> <li>The static <code>grantAuthoritiesFromUserRole</code> method of UserDetailsServiceHelper class could be used to have the same authentication process than <code>mem-auth</code> profile, i.e. if the user has a role name containing the characters 'admin', ignoring case, user will be given all authorities available, else he will be given the authorities associated by the role retrieved by the AuthenticationService.</li> </ul>"},{"location":"installation/advanced_topics/#compression","title":"Compression","text":"<p>Spring Boot allows to configure compression on HTTP responses payloads.</p> <p>Chutney Server stores scenarios executions reports and send them over the network, so it could be useful to use this configuration.</p> <p>Server compression configuration</p> <pre><code>server:\n    compression:\n        enabled: true\n        mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json # (1)\n        min-response-size: 1024 # (2)\n</code></pre> <ol> <li>The mime-types you want to compresse</li> <li>The minimum content length required for compression</li> </ol>"},{"location":"installation/advanced_topics/#session-management","title":"Session management","text":"<p>Spring Boot allows to configure session management.</p> <p>Server session configuration (with cookie)</p> <pre><code>server:\n    servlet:\n        session:\n            timeout: 240m # (1)\n            tracking-modes: cookie\n        cookie:\n            http-only: true # (2)\n            secure: true # (3)\n</code></pre> <ol> <li>The session timeout in minutes (example is 4 hours)</li> <li>Forbids Javascript to access the cookie</li> <li>Only for HTTPS requests</li> </ol>"},{"location":"installation/advanced_topics/#actuator","title":"Actuator","text":"<p>Spring Boot provides production-ready features with the Actuator module. Since Chutney includes this module, you can also configure it.</p> <p>Actuator configuration examples</p> Total deactivationWeb activation simple example <pre><code>management:\n    server:\n        port: -1\n    endpoints:\n        enabled-by-default: false\n        web:\n            exposure:\n                exclude: \"*\"\n        jmx:\n            exposure:\n                exclude: \"*\"\n</code></pre> <pre><code>management:\n    endpoints:\n        web:\n            exposure:\n                include: \"*\"\n    endpoint:\n        health:\n            show-details: always\n</code></pre> <p>Warning</p> <p>Chutney enforces <code>ADMIN_ACCESS</code> permissions on all default Actuator endpoints.</p>"},{"location":"installation/advanced_topics/#specifics-values","title":"Specifics values","text":"<p>Following table shows all properties you can set to configure Chutney.</p> Name Description Default value chutney.configuration-folder Local directory path to data and configuration files ~/.chutney/conf chutney.environment.configuration-folder Local directory path to environments data files ~/.chutney/conf/environment chutney.jira.configuration-folder Local directory path to jira data files ~/.chutney/conf/jira chutney.server.execution.async.publisher.ttl Time to live in seconds of a finished observable scenario execution 5 chutney.server.execution.async.publisher.debounce Window time in milliseconds in which a running observable scenario execution ignores new associated engine report 250 chutney.server.campaigns.executor.pool-size Pool size of campaigns' executor 20 chutney.server.scheduled-campaigns.fixed-rate Fixed time period for scheduled campaigns execution checking 60000 chutney.server.scheduled-campaigns.executor.pool-size Pool size of scheduled campaigns' executor 20 chutney.server.schedule-purge.cron Purge launch cron planification 0 0 1 * * * chutney.server.schedule-purge.timeout Timeout in seconds for purge (+ retries) 600 chutney.server.schedule-purge.retry Number of max purge retries 2 chutney.server.schedule-purge.max-scenario-executions Number of max scenario executions to keep when purging 10 chutney.server.schedule-purge.max-campaign-executions Number of max campaign executions to keep when purging 10 chutney.server.agent.name Default name of local agent chutney.server.agent.hostname Default hostname of local agent chutney.server.agent.network.connection-checker-timeout Socket timeout in milliseconds for agent networking management actions 1000 chutney.server.editions.ttl.value Time to live value of unclosed scenario's editions 6 chutney.server.editions.ttl.unit Time to live time unit of unclosed scenario's editions HOURS chutney.engine.executor.pool-size Pool size of scenarios' executor 20 chutney.engine.delegation.user Username of engine's delegation service HTTP client chutney.engine.delegation.password Password of engine's delegation service HTTP client chutney.engine.reporter.publisher.ttl Time to live in seconds of the engine's executions' reports 5 chutney.actions.sql.max-logged-rows Max logged rows in report for SQL action 30"},{"location":"installation/local_dev/","title":"Local Development","text":"<p>You can run scenarios without installing a Chutney server. This fits well within a CI or for a developer local setup.</p> <p>However, building software is most often a teamwork ! Doing so, you will need to collaborate and share scenarios, track their executions  and allow functional and business analyst to review and be involved in testing their product.</p> <p>That's why we provide a server and web UI to help us do all these things.</p> <p>You can find all code and configuration below in this example project</p>"},{"location":"installation/local_dev/#start-a-server","title":"Start a server","text":"<p>Docker</p> <ol> <li>Checkout this example project</li> <li>Start Chutney locally with <code>docker compose up&amp;</code> (Docker compose documentation).</li> </ol> <p>Java</p> <ol> <li>Download the latest release jar chutney-local-dev-x.x.x.jar.</li> <li>Start Chutney locally with <code>java -jar chutney-local-dev-x.x.x.jar</code></li> </ol> <p>Intellij</p> <ol> <li>Checkout chutney.</li> <li>Build the project using maven : <code>mvn compile [-DuseExternalNpm]</code></li> <li>Start Intellij run configuration <code>start_local_server</code></li> </ol>"},{"location":"installation/on_premise/details/","title":"Further details","text":""},{"location":"installation/on_premise/details/#database","title":"Database","text":"<p>Liquibase is used to manage Chutney RDBMS schema. You can find corresponding changelog here.</p> <p>Note</p> <ul> <li>Chutney is tested with SQLite, H2 and PostgreSQL databases.  </li> <li>You can find complete examples in maven module chutny/packaging/local-dev, for all three database types.</li> </ul> <p>To configure your datasource, use the property <code>spring.datasource</code></p> SQLiteH2 (memory)PostgreSQL (SSL two way) <pre><code>spring:\n    datasource:\n        url: jdbc:sqlite:.chutney/data/chutney.db\n</code></pre> <pre><code>spring:\n    datasource:\n        url: jdbc:h2:mem:dbName\n</code></pre> <pre><code>spring:\n    datasource:\n        url: jdbc:postgresql://host:port/dbName?ssl=true&amp;sslmode=verify-ca&amp;sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory&amp;currentSchema=mySchema\n        username: user\n</code></pre>"},{"location":"installation/on_premise/details/#logs","title":"Logs","text":"<p>Chutney depends on SLF4J API logging library.</p> <p>At runtime, the Chutney server use the Logback SLF4J implementation and bridges all legacy APIs (JCL, LOG4J and JUL).</p> <p>Warning</p> <p>Since the server bridges all legacy APIs, you must be careful to not include any of the following libraries :</p> <ul> <li>jcl-over-slf4j</li> <li>log4j-over-slf4j and slf4j-reload4j</li> <li>jul-to-slf4j</li> </ul> <p>Read Bridging legacy APIs for further details.</p> <p>A Logback configuration must be package in the packaging project, in classpath root.</p> Logback configuration examples Standard outputRolling file <pre><code>&lt;configuration&gt;\n    &lt;appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;\n        &lt;/encoder&gt;\n    &lt;/appender&gt;\n\n    &lt;root level=\"WARN\"&gt;\n        &lt;appender-ref ref=\"stdout\"/&gt;\n    &lt;/root&gt;\n&lt;/configuration&gt;\n</code></pre> <pre><code>&lt;configuration&gt;\n    &lt;appender name=\"total\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt; \n        &lt;file&gt;total.log&lt;/file&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;%d | %logger{16} | %level | %msg%n&lt;/pattern&gt;\n        &lt;/encoder&gt;\n        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"&gt;\n            &lt;fileNamePattern&gt;total.%i.log&lt;/fileNamePattern&gt;\n            &lt;minIndex&gt;1&lt;/minIndex&gt;\n            &lt;maxIndex&gt;50&lt;/maxIndex&gt;\n        &lt;/rollingPolicy&gt;\n        &lt;triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"&gt;\n            &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;\n        &lt;/triggeringPolicy&gt;\n    &lt;/appender&gt;\n\n    &lt;root level=\"WARN\"&gt;\n        &lt;appender-ref ref=\"total\"/&gt;\n    &lt;/root&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"installation/on_premise/details/#server-tlsssl","title":"Server (TLS/SSL)","text":"<p>Chutney server enforces the use of secure calls on any incoming requests.</p> <pre><code>!!! note \"Server HTTPS configuration\"\n``` yaml\nserver:\n    port: 443\n    ssl:\n        keystore: # keystore path\n        key-store-password: # keystore password\n        key-password: # key password\n        trust-store: # truststore path\n        trust-store-password: # truststore password\n```\n</code></pre> <p>Chutney Server provides <code>undertow-https-redirect</code> Spring profile to redirect unsecured request to the right secured port.</p> Using <code>undertow-https-redirect</code> Spring profile <ul> <li>Activate the profile</li> </ul> <pre><code>spring:\n    profiles:\n        active:\n          - undertow-https-redirect\n</code></pre> <ul> <li>Configure the HTTP listener</li> </ul> <pre><code>server:\n    http:\n        port: 80 # (1)\n        interface: 0.0.0.0 # (2)\n</code></pre> <ol> <li>HTTP port to use</li> <li>Interface to bind to</li> </ol>"},{"location":"installation/on_premise/introduction/","title":"Introduction","text":"<p>When using Chutney to test your applications, you may need proprietary drivers, clients or use an obscure protocol not implemented by Chutney.</p> <p>In order to do this, you have to make your own custom package.</p> <p>For example, if you use JMS with Oracle WebLogic, you have to package Chutney with the Oracle WebLogic client as a runtime dependency. Another use case is when you need an Action for something we don't provide, we are open to requests but if it's proprietary and cannot be open, then you have to implement your own Action and package Chutney with it.</p> <p>Moreover,if you intend to use a shared Chutney server, you may need to integrate to an external database or authentication system. In order to do this, some configurations require to be done with Spring, so you have to make your own Chutney package.</p> <p>This part will guide you on how to :</p> <ul> <li>Use Chutney with proprietary drivers or clients</li> <li>Use Chutney with an external database and authentication system</li> <li>Configure logs, SSL/TLS, sessions, metrics, etc.</li> </ul> <p>Quick technical insight</p> <ul> <li>Chutney server is a Spring Boot application running with Undertow</li> <li>Chutney UI is an Angular web application</li> <li>Chutney is packaged as a Spring Boot executable jar</li> <li>Chutney follows Angular and Spring Boot lastest versions and corresponding dependencies</li> </ul>"},{"location":"installation/on_premise/introduction/#configuration","title":"Configuration","text":"<p>In addition to java dependencies, you may have to provide your own configuration for your database, authentication system, user roles and permissions, logs etc.</p> <p>Configuration is done by setting Spring Boot or Chutney properties.</p> <p>In order to do this, you have to edit the default Spring Boot configuration file <code>application.yml</code>.</p> <p>Handling secrets</p> <p>How to handle secrets in configuration files varies a lot and depends on your CI/CD so this documentation does not cover this topic. One example, if you use Ansible, you can package a subset of configuration files, select and filter them during deployment, so they will be included in the runtime classpath of the application.</p>"},{"location":"installation/on_premise/minimal_conf/","title":"Minimal configuration","text":"<p>Packaging example</p> <p>Maven module chutney/packaging/local-dev shows one way of packaging Chutney. Use it as an example to make your own package, custom to your needs.</p>"},{"location":"installation/on_premise/minimal_conf/#maven-configuration","title":"Maven configuration","text":"Executable jar packageChutney dependenciesProprietary dependenciesCustom extensions <p>Use Spring Boot Build Tool Plugins to package Chutney as an executable jar. <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n    &lt;configuration&gt;\n        &lt;executable&gt;true&lt;/executable&gt;\n        &lt;layout&gt;ZIP&lt;/layout&gt;\n        &lt;mainClass&gt;com.chutneytesting.ServerBootstrap&lt;/mainClass&gt;\n        &lt;finalName&gt;chutney-${project.artifactId}-${chutney.version}&lt;/finalName&gt;\n    &lt;/configuration&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;repackage&lt;/goal&gt;\n            &lt;/goals&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre></p> <p>Declare a BOM dependency on Chutney parent. <pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.chutneytesting&lt;/groupId&gt;\n            &lt;artifactId&gt;chutney-parent&lt;/artifactId&gt;\n            &lt;version&gt;${chutney.version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> Add Chutney server and UI as dependencies. <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.chutneytesting&lt;/groupId&gt;\n    &lt;artifactId&gt;server&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.chutneytesting&lt;/groupId&gt;\n    &lt;artifactId&gt;ui&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> Then, add JDBC driver dependency for your chosen Chutney main database. <pre><code>&lt;dependency&gt; &lt;!-- (1) --&gt;\n    &lt;groupId&gt;org.xerial&lt;/groupId&gt;\n    &lt;artifactId&gt;sqlite-jdbc&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt; &lt;!-- (2) --&gt;\n    &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n    &lt;artifactId&gt;h2&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt; &lt;!-- (3) --&gt;\n    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></p> <ol> <li>For SQLite as Chutney main database</li> <li>For H2 as Chutney main database</li> <li>For PostgreSQL as Chutney main database</li> </ol> <p>Also, you should add any dependencies you would need to run your scenarios. This may depend on the underlying Chutney actions you are using. <pre><code>&lt;dependency&gt; &lt;!-- (1) --&gt;\n    &lt;groupId&gt;com.oracle&lt;/groupId&gt;\n    &lt;artifactId&gt;ojdbc11&lt;/artifactId&gt;\n    &lt;version&gt;x.x.x&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt; &lt;!-- (2) --&gt;\n    &lt;groupId&gt;weblogic&lt;/groupId&gt;\n    &lt;artifactId&gt;wlthinclient&lt;/artifactId&gt;\n    &lt;version&gt;x.x.x&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre></p> <ol> <li>Example for using SQL actions and query an Oracle database</li> <li>Example for using JMS actions with a WebLogic server</li> </ol> <p>Optionally, add your own Actions and Functions. <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.my.company&lt;/groupId&gt;\n    &lt;artifactId&gt;chutney-extensions&lt;/artifactId&gt;\n    &lt;version&gt;x.x.x&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"installation/on_premise/minimal_conf/#logback","title":"Logback","text":"<p>A Logback configuration must be package in the packaging project, in classpath root.</p> <p>Logback configuration examples</p> Standard outputRolling file <pre><code>&lt;configuration&gt;\n    &lt;appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;\n        &lt;/encoder&gt;\n    &lt;/appender&gt;\n\n    &lt;root level=\"WARN\"&gt;\n        &lt;appender-ref ref=\"stdout\"/&gt;\n    &lt;/root&gt;\n&lt;/configuration&gt;\n</code></pre> <pre><code>&lt;configuration&gt;\n    &lt;appender name=\"total\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt; \n        &lt;file&gt;total.log&lt;/file&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;%d | %logger{16} | %level | %msg%n&lt;/pattern&gt;\n        &lt;/encoder&gt;\n        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"&gt;\n            &lt;fileNamePattern&gt;total.%i.log&lt;/fileNamePattern&gt;\n            &lt;minIndex&gt;1&lt;/minIndex&gt;\n            &lt;maxIndex&gt;50&lt;/maxIndex&gt;\n        &lt;/rollingPolicy&gt;\n        &lt;triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"&gt;\n            &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;\n        &lt;/triggeringPolicy&gt;\n    &lt;/appender&gt;\n\n    &lt;root level=\"WARN\"&gt;\n        &lt;appender-ref ref=\"total\"/&gt;\n    &lt;/root&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"installation/on_premise/minimal_conf/#applicationyml","title":"Application.yml","text":"<p>Coming Soon</p>"}]}